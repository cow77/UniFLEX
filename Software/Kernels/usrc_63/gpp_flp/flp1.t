        name    floppy1        opt     nol        lib     ../usrc_63/include/macdefs.h        lib     ../include/flpdrvr.h        opt     lis,exp   opt nopFDC     set     2793*** experimental driver for Floppy on the GPP. The  GPP should have it's * ROM monitor. The assembled binary can be loaded in the GPP memory* with the 'memloader' program** data inverse maskEOR4FDC equ     0               00 = 2793, FF is 2791** control latch out*LA_DS0  equ     %00001001       drive select 0LA_SID  equ     %00010000       side selectLA_SDN  equ     %00100000       dens select 0=DD/1=SDLA_8_5  equ     %01000000       8"/5" data rate 0=8"/1=5"LA_HLT  equ     %10000000       toggle head load timer** status buffer*ST_INT  equ     %01000000       interrupt from FDCST_DRQ  equ     %1000000        data request from FDC** FDC commands*FD_RST  equ     $00             restoreFD_SEK  equ     $10             seekFD_SRD  equ     $84             read dataFD_SWR  equ     $A4             write dataFD_MRD  equ     $90             read multipleFD_MWR  equ     $B0             write multipleFD_RTR  equ     $e0             read trackFD_WTR  equ     $F0             write trackFD_FIN  equ     $D0             force interrupt** fdc hardware*fdcbas  equ     $8000* subject to EOR4FDCfo2cmd  equ     0               offset to command registerfo2trk  equ     1               offset to track registerfo2sec  equ     2               offset to sector registerfo2dat  equ     3               offset to data register* not subject to EOR4FDCfo4lat  equ     4               drive,side,density latchfo4sta  equ     8               fdc status*fo2trg  equ     12              scope trigger*        org     $0800        org     $0020buffer1 rmb     512*buffer1 rmb     1024            max sector size*buffer2 rmb     1024*side    rmb     1dens    fcb     1track   rmb     1sector  rmb     1latch   rmb     1*wrkprm  fdb     fltabl*step    rzb     1retry   fcb     4bf1ptr  rmb     2bf1siz  rmb     2bf2ptr  rmb     2bf2siz  rmb     2        org     $4000start   equ    *        orcc    #$50        lda     $03ff        lbeq    loop*        lda     #4        sta     retry        lda     #LA_DS0        sta     fdcbas+fo4lat        sta     latch        ldy     #$7fff        pshs    y21      lda     fdcbas+fo2cmd        bpl     22f            ready        lda     latch        sta     fdcbas+fo4lat        leay    -1,y        bne     21b        dec     0,s        bne     21b        puls    y*        lda     #$81        jmp     08f22      puls    y        lda     $000f        beq     24f*        clr     $000f47      lda     #FD_RST         restore        eora    #EOR4FDC        sta     fdcbas+fo2cmd        jsr     dlytim01      lda     fdcbas+fo2cmd        bita    #%00000001        bne     01b        clr     track*24      ldb     #1        stb     step07      clr     $0008        lda     latch        sta     fdcbas+fo4lat        ldy     #5000021      lda     fdcbas+fo2cmd        bpl     20f            ready        leay    -1,y        bne     21b        lda     #$81        jmp     08f20      ldx     wrkprm        ldd     0,x        cmpd    $0010        beq     30f        jsr     srchpm*       bra     20b30      ldb     #2        stb     step        jsr     clcpos         block -> track/sector        bne     08f        ldx     #fdcbas        ldb     #3        stb     step        jsr     fseek        bne     08f        ldu     #buffer1        ldx     #fdcbas        ldb     #4        stb     step        jsr     frdsec        sta     $0008        beq     08f        cmpa    #%10010000        bne     15f        dec     retry        bpl     47b        bra     08f15      dec     retry        bpl     07b*08      sta     $0008    status        ldb    #5        stb     step        nop        clr    $03ff           remove request        lda     #$ff           tell CPU we did it        sta     $03fe*loop    nop        tst     $03fd        beq     04f10      swi04      jmp     startdlytim  bsr     dly1dly1    bsr     dly2dly2    bsr     dly3dly3    exg     x,x        rts** code routine, to read one sector from FDC* U holds buffer address, count from data address mark* drive select, density and such alreay set up* time out from INT fdc*frdsec  equ     *        pshs    cc,x,y,u*        lda     #FD_SRD         start read operation        eora    #EOR4FDC        sta     fo2cmd,x        jsr     dlytim*01      orcc    #$50            disable ints        bra     03f02      lda     fo2dat,x         get data        eora    #EOR4FDC        sta     0,u+03      lda     fo2cmd,x        follow next        eora    #EOR4FDC        bita    #2        bne     02b        bita    #1        bne     03b*98      ldy     5,s        subr    Y,U             get count  stu $001e        cmpu    #512        beq     97f        lda     #%00010000      rnf        bra     96f             count in X97      lda     fo2cmd,x        read status        anda    #%10011000        beq     99f96      ora     #$8099      puls    cc,x,y,u,pc** clcpos, transfer block# into track/sector/side*clcpos  equ     *        ldd     $0004           block no        clr     0,-s02        subd    3,x             sectrk        blo     01f        inc     0,s             up track #        bra     02b01      addd    3,x* sec in B,track# on stack        pshs    b        ldb     1,x            is double side?        andb    #%00000001        puls    b        beq     05f             no*        lsr     0,s            track#        bcc     05f            even track* odd track, add bias        addd    3,x        pshs    b        ldb     latch        orb     #LA_SID        select side 1        stb     latch        puls    b*05      incb                    1 relative03      stb     sector*        puls    a        sta     track        cmpa    2,x        bhi     91f        clra        rts90      lda     #%10000001        rts91      lda     #%10000000        rts*** fseek,*fseek   equ     *        pshs    x,y,u        lda     latch        sta     fo4lat,x        lda     sector        sta     fo2sec,x        lda     track        cmpa    fo2trk,x        beq     80f*        sta     fo2dat,x        lda     #FD_SEK        sta     fo2cmd,x        jsr     dlytim*       ldy     #5000001      lda     fo2cmd,x        bita    #1        beq     80f*       leay    -1,y*       bne     01b        bra     01b        lda     #$81        bra     02f80      lda     latch        sta     fo4lat,x        clra02      puls    x,y,u,pcsrchpm  equ     *        ldx     #fltabl03      ldd     0,x        beq     01f             end of table        cmpd    $0010        beq     01f        leax    6,x        bra     03b01      stx     wrkprm        rtsfltabl  equ     *        fcb     $c1,$11,79,0,20,0       F3-DH80        fcb     $c1,$00,79,0,20,0       F3-SH80        fcb     $01,$11,79,0,16,0       F8-DD80        fcb     $01,$00,79,0,16,0       F8-SD80        fcb     $01,$01,79,0,16,0       FD-DD        fcb     $01,$00,79,0,16,0       FD-SD        fcb     $00,$01,79,0,8,0        FD-DSflpdfl  fcb     $00,$00,79,0,8,0        FD-SS