                     *                     * GPPFLPDRV, ROM code for CPU09GPP with 09FLP add-on                     *                     * supports:  read block 128,256,512 byte size                     *            write block 128,256,512 byte size                     *            read track 125kBit, 250kBit, 500 kBit rate                     *            write track 125kBit, 250 kBit, 500 kBit rate                     *                     *            supports 8", 5.25" and 3.5" in single /                     *            double side and single / double / high density                     *                     *                     *            runs with Interrupts disabled                     *                     *                     *                     *                     *                     *                     *                     *                               opt    lis,exp   |                               opt    nop                                          *                     *  for DEBUG program is RAM based                     *               E000  ROMBASE   equ    $E000                                    FFF0  VECTORS   equ    $FFF0                                                         0400  RAMBASE   equ    $0400     just above Dual Port Ram               0800  BUFFER    equ    $0800     track buffer                                    0040  STACKSZ   equ    64        enough?                                    9C40  RDYWAIT   equ    40000     delay count                                          * hardware dependent values               0009  LA_DS0    equ    LA_SEL0|LA_MOT drive select 0               000A  LA_DS1    equ    LA_SEL1|LA_MOT drive select 1               000C  LA_DS2    equ    LA_SEL2|LA_MOT drive select 2                                          *                     * DPR, command exchange withe kernel                     *               0091  CMDMSK    equ    %10010001 command mask               0011  CMDRSC    equ    %00010001 read sector               0001  CMDWSC    equ    %00000001 write sector               0091  CMDRTK    equ    %10010001 read track               0081  CMDWTK    equ    %10000001 write track                                            0400                         org    RAMBASE                       0400               side      rmb    1         work side  0401               dens      rmb    1         work dens  0402               lside     rmb    1         actual latch side  0403               track     rmb    1  0404               sector    rmb    1  0405               latch     rmb    1         latch backup  0406               lstdrv    rmb    1         last selected drive  0407               unbias    rmb    1         unbiased sectors  0408               trktab    rmb    4         track numbers / drive                                          *  040C               step      rmb    1         debug for progress  040D               wrkprm    rmb    2         pointer to drive info table entry  040F               retry     rmb    1         retry count                                                                 0410                         rmb    STACKSZ               0450  romstck   equ    *                                    0450  RAMEND    equ    *                       0800                         org    BUFFER  0800               trkbuf    rmb    12500     track buffer                       E000                         org    ROMBASE                                          *                     * configuration constants                     *  E000 00            steprt    fcb    0         step rate modifier  E001 02            rretry    fcb    2  E002 09 0A 0C 00   drvsel    fcb    LA_DS0,LA_DS1,LA_DS2,0 driver select bytes                     *  E006 11 00         parstab   fcb    CMDRSC,0  E008 E109                    fdb    do_rdsc  E00A 01 00                   fcb    CMDWSC,0  E00C E12D                    fdb    do_wrsc  E00E 91 00                   fcb    CMDRTK,0  E010 E151                    fdb    do_rdtk  E012 81 00                   fcb    CMDWTK,0  E014 E15D                    fdb    do_wrtk  E016 0000 0000               fdb    0,0       end of table                                          *                     * cold start                     *               E01A  reset     equ    *  E01A                         seti  E01A 1A   50                 orcc   #FF|IF                               endm  E01C 10CE 0450               lds    #romstck  E020 4F                      clra  E021 1F   8B                 tfr    a,dp  E023 11 3D 03                fcb    $11,$3d,$03 6309                     *  E026 8E   0000               ldx    #flpdpr   go clear the Dual Port Ram  E029                         clrd  E029 104F                    fdb    $104f                               endm  E02B ED   81       01        std    0,x++  E02D 8C   03FF               cmpx   #flpdpr+flptel  E030 25   F9                 blo    01b                     *  E032 8E   0400               ldx    #RAMBASE  E035 ED   81       02        std    0,x++  E037 8C   0450               cmpx   #RAMEND  E03A 25   F9                 blo    02b  E03C 8E   E32D               ldx    #flpdfl  E03F BF   040D               stx    wrkprm    set pointer                     *                     * normally the driver loops here                     *               E042  warm      equ    *  E042                         seti  E042 1A   50                 orcc   #FF|IF                               endm  E044 10CE 0450               lds    #romstck                     *  E048 BD   E105     01        jsr    flpcmd    new message from main CPU  E04B 27   FB                 beq    01b       wait                     *  E04D 108E 8000               ldy    #fdcbas   floppy HW base address  E051 D6   09                 ldb    flpdpr+fldriv get drive  0,1,2  E053 8E   E002               ldx    #drvsel  E056 3A                      abx  E057 F6   0405               ldb    latch  E05A C4   F8                 andb   #$f8      leave these intact  E05C 34   04                 pshs   b  E05E E6   84                 ldb    0,x  E060 EA   E0                 orb    0,s+  E062 F7   0405               stb    latch     clean higher bits                     *                     * update other settings                     *  E065 B6   E001               lda    rretry    rom setting  E068 B7   040F               sta    retry                     * test DD  E06B 96   0C                 lda    flpdpr+fltden  E06D 84   01                 anda   #%00000001 DD?  E06F B7   0401               sta    dens                     * test DS, + unbiased  E072 96   0B       setd0     lda    flpdpr+fltsid  E074 7F   0407               clr    unbias  E077 85   02                 bita   #%00000010  E079 27   03                 beq    setd11  E07B 7C   0407               inc    unbias    unbiased  E07E 84   01       setd11    anda   #%00000001 2 sided  E080 B7   0400               sta    side      set side capabilities                     * test 5"/8"  E083 96   0B                 lda    flpdpr+fltsid  E085 85   40                 bita   #%01000000 5/8" select  E087 27   06                 beq    setd2  E089                         oime   LA_8_5,latch  E089 71                      fcb    $71  E08A 40                      fcb    LA_8_5  E08B 0405                    fdb    latch                               endm  E08D 20   04                 bra    setd3                     *  E08F               setd2     aime   255-LA_8_5,latch set 8" (latch bit = 0)  E08F 72                      fcb    $72  E090 BF                      fcb    255-LA_8_5  E091 0405                    fdb    latch                               endm  E093               setd3     oime   $80,latch  E093 71                      fcb    $71  E094 80                      fcb    $80  E095 0405                    fdb    latch                               endm  E097 F6   0405               ldb    latch  E09A E7   24       setd9     stb    fo4lat,y  set latch                     *                     * everything is set                     *  E09C BD   E2CE     skretry   jsr    chkrdy    see if drive is on-line  E09F 4D                      tsta  E0A0 26   3E                 bne    flerr                     * if new open force restore  E0A2 96   0A                 lda    flpdpr+flnwop new open?  E0A4 27   09                 beq    04f       yes, skip forced restore                     *                     * retry loops here                     *  E0A6 BD   E2EA               jsr    restore   restore drive  E0A9 84   15                 anda   #%00010101  E0AB 81   04                 cmpa   #%00000100 should be there  E0AD 26   31                 bne    flerr                     *  E0AF 0F   0A       04        clr    flpdpr+flnwop remove flag                     *  E0B1 C6   01                 ldb    #1        set progress  E0B3 F7   040C               stb    step                     *  E0B6 0F   08                 clr    flpdpr+flstat initialize return status                     *  E0B8 BD   E2CE               jsr    chkrdy    drive still ready?  E0BB 4D                      tsta  E0BC 26   22                 bne    flerr                     *  E0BE BD   E30F     06        jsr    srchpm    scan drive table                     *  E0C1 C6   02                 ldb    #2  E0C3 F7   040C               stb    step  E0C6 96   00                 lda    flpdpr+flrflg check command for valid  E0C8 84   91                 anda   #CMDMSK  E0CA 8E   E006               ldx    #parstab  search function  E0CD A1   84       21        cmpa   0,x  E0CF 27   0C                 beq    20f  E0D1 30   04                 leax   4,x  E0D3 6D   84                 tst    0,x  E0D5 26   F6                 bne    21b                     *  E0D7 86   BF                 lda    #FD_ERR+63  E0D9 97   08                 sta    flpdpr+flstat  E0DB 20   14                 bra    fend1                     *  E0DD AD   98 02    20        jsr    [2,x]                     *  E0E0 97   08       flerr     sta    flpdpr+flstat                     *  E0E2 C6   07       fend      ldb    #7  E0E4 F7   040C               stb    step  E0E7 4D                      tsta             error  E0E8 27   07                 beq    fend1  E0EA 7A   040F               dec    retry >E0ED 1026 FFAB               lbne   skretry  E0F1 12            fend1     nop  E0F2 8D   03                 bsr    flpack    tell main CPU about it                     *  E0F4 7E   E042               jmp    warm                                          *                     *  write POSTBOX to other CPU I'm done                     *  E0F7 C6   08       flpack    ldb    #8  E0F9 F7   040C               stb    step  E0FC 7F   03FF               clr    flpdpr+flptel acknowledge main CPU  E0FF 86   FF                 lda    #$ff  E101 B7   03FE               sta    flpdpr+flpint tell him I'am done  E104 39                      rts                                          *                     * flpcmd, test INTBOX for new data from main CPU                     *  E105 B6   03FF     flpcmd    lda    flpdpr+flptel command present?  E108 39                      rts                                          *                     * Y = fdcbase                     *               E109  do_rdsc   equ    *  E109 C6   03                 ldb    #3  E10B F7   040C               stb    step                     *  E10E BD   E20D               jsr    clcpos    block# -> trk/sec/sid  E111 4D                      tsta  E112 26   18                 bne    frder     error                     *  E114 C6   04                 ldb    #4  E116 F7   040C               stb    step  E119 BD   E267               jsr    fseek  E11C 4D                      tsta  E11D 26   0D                 bne    frder                     *  E11F C6   05                 ldb    #5  E121 F7   040C               stb    step  E124 CE   0020               ldu    #flpdpr+flpfifo  E127 86   88                 lda    #FD_SRD  E129 BD   E1BA               jsr    frdblk                     *  E12C 39            frder     rts                                          *                     * Y = fdcbase                     *               E12D  do_wrsc   equ    *  E12D C6   03                 ldb    #3  E12F F7   040C               stb    step                     *  E132 BD   E20D               jsr    clcpos    block# -> trk/sec/sid  E135 4D                      tsta  E136 26   18                 bne    fwder     error                     *  E138 C6   04                 ldb    #4  E13A F7   040C               stb    step  E13D BD   E267               jsr    fseek  E140 4D                      tsta  E141 26   0D                 bne    fwder                     *  E143 C6   05                 ldb    #5  E145 F7   040C               stb    step  E148 CE   0020               ldu    #flpdpr+flpfifo  E14B 86   A8                 lda    #FD_SWR  E14D BD   E1EF               jsr    fwrblk                     *  E150 39            fwder     rts                                          *                     *TODO                     *               E151  do_rdtk   equ    *  E151 CE   0800               ldu    #trkbuf  E154 86   E4                 lda    #FD_RTR >E156 BD   E1BA               jsr    frdblk                      >E159 BD   E0F7               jsr    flpack  E15C 39                      rts                                          *                     * We arrive here when the DPR contains the first BUFSIZ                     * bytes of the track image                     *               E15D  do_wrtk   equ    *  E15D 34   70                 pshs   x,y,u  E15F 8E   0800               ldx    #trkbuf                     * copy DPR data to trkbuf  E162 12            03        nop  E163 CE   0020               ldu    #flpdpr+flpfifo  E166                         ldwi   BUFSIZ  E166 1086                    fdb    $1086  E168 0200                    fdb    BUFSIZ                               endm  E16A                         tfm1   U,X  E16A 1138                    fdb    $1138  E16C 31                      fcb    U<<4|X                               endm  E16D DC   06                 ldd    flpdpr+fltxfr  E16F 1093 04                 cmpd   flpdpr+fltsiz we have all  E172 24   0D                 bhs    02f  E174 4F                      clra  E175 BD   E0F7               jsr    flpack    tell hime I took it                     *  E178 6D   28       01        tst    fo4sta,y  keep motor running >E17A BD   E105               jsr    flpcmd    wait for next data  E17D 27   F9                 beq    01b       postbox empty  E17F 20   E1                 bra    03b       loop until all                     * all data present  E181 12            02        nop              TRAP  E182 AE   E4                 ldx    0,s       old X  E184 C6   03                 ldb    #3  E186 F7   040C               stb    step                     *  E189 96   03                 lda    flpdpr+flblkl track address << 1 + side bit  E18B 5F                      clrb  E18C 44                      lsra             strip side bit  E18D 24   01                 bcc    08f  E18F 5C                      incb  E190 F7   0402     08        stb    lside     format track on other side                     *  E193 B7   0403               sta    track  E196 26   03                 bne    18f       make sure we  start at track 00  E198 BD   E2EA               jsr    restore   restore if target is 0                     *  E19B 86   01       18        lda    #1  E19D B7   0404               sta    sector                     *  E1A0 C6   04                 ldb    #4  E1A2 F7   040C               stb    step  E1A5 BD   E267               jsr    fseek  E1A8 4D                      tsta  E1A9 26   0D                 bne    10f                     *                     * restore the registers for the write                     *  E1AB C6   05                 ldb    #5  E1AD F7   040C               stb    step  E1B0 CE   0800               ldu    #trkbuf  E1B3 86   F4                 lda    #FD_WTR >E1B5 BD   E1EF               jsr    fwrblk                     *  E1B8 35   F0       10        puls   x,y,u,pc                                          *                     * code routine, to read one dataset from FDC                     * U = buffer address,                     * Y = base address hardware                     * A = command                     *                     * can read sector or track                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1BA  frdblk    equ    *  E1BA 34   70                 pshs   x,y,u  E1BC C6   1F                 ldb    #31       very long              create timeout  E1BE 8E   0000               ldx    #0        65536*2*25/4 cycles                     *  E1C1 88   00                 eora   #EOR4FDC  E1C3 A7   A4                 sta    fo2cmd,y                     *  E1C5 1A   50       01        orcc   #$50      disable ints  E1C7 20   06                 bra    03f                     * loop here  E1C9 A6   23       02        lda    fo2dat,y  get data  E1CB 88   00                 eora   #EOR4FDC  E1CD A7   C0                 sta    0,u+      transfer                     * poll fdc for DRQ  E1CF A6   28       03        lda    fo4sta,y  E1D1 2B   F6                 bmi    02b       DRQ  E1D3 30   01                 leax   1,x       count up  E1D5 26   03                 bne    11f  E1D7 5A                      decb             at zero dec B  E1D8 27   0A                 beq    98f       if zero abort  E1DA 85   40       11        bita   #ST_INT   INT  E1DC 27   F1                 beq    03b                     *  E1DE A6   A4       97        lda    fo2cmd,y  read status  E1E0 88   00                 eora   #EOR4FDC                     *  E1E2 35   F0       99        puls   x,y,u,pc                       E1E4 86   D0       98        lda    #FD_FI0   force interrupt  E1E6 98   00                 eora   EOR4FDC  E1E8 A7   A4                 sta    fo2cmd,y  E1EA BD   E307               jsr    delay  E1ED 20   EF                 bra    97b                                          *                     * code routine, to write one dataset to the FDC                     * U = buffer address                     * Y = hardware base                     * A = command                     *                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1EF  fwrblk    equ    *  E1EF 34   70                 pshs   x,y,u                     *  E1F1 88   00                 eora   #EOR4FDC  E1F3 A7   A4                 sta    fo2cmd,y                     *  E1F5 1A   50       01        orcc   #$50      disable ints  E1F7 20   06                 bra    03f                       E1F9 A6   C0       02        lda    0,u+  E1FB 88   00                 eora   #EOR4FDC  E1FD A7   23                 sta    fo2dat,y  put data                     *  E1FF A6   28       03        lda    fo4sta,y  E201 2B   F6                 bmi    02b  E203 85   40                 bita   #ST_INT   INT  E205 27   F8                 beq    03b                     *  E207 A6   A4                 lda    fo2cmd,y  read status  E209 88   00                 eora   #EOR4FDC                     *  E20B 35   F0       99        puls   x,y,u,pc                                          *                     * clcpos, transfer block# into track/sector/side                     *                     * Y = fdcbase                     *               E20D  clcpos    equ    *  E20D 34   70                 pshs   x,y,u  E20F 7F   0402               clr    lside     result side of calc  E212 DC   02                 ldd    flpdpr+flblkm block# M/L                     *  E214 9E   04                 ldx    flpdpr+fltsiz check special addressing  E216 8C   0100               cmpx   #256  E219 27   05                 beq    21f  E21B 8C   0080               cmpx   #128  E21E 26   10                 bne    20f                     *                     *  absolute addressing                     *  E220 B7   0403     21        sta    track  E223 F7   0404               stb    sector  E226 B6   0400               lda    side      from ttyset  E229 27   35                 beq    88f  E22B 7C   0402               inc    lside     set side 1  E22E 20   30                 bra    88f                     *                     * regular block to track/sector                     *  E230 BE   040D     20        ldx    wrkprm    fresh copy of drive params                     *  E233 7F   0403               clr    track     track = 0                     *  E236 A3   03       02        subd   3,x       sec/trk  E238 2B   05                 bmi    01f                     *  E23A 7C   0403               inc    track     up track #  E23D 20   F7                 bra    02b                     *  E23F E3   03       01        addd   3,x       adjust                     * sector in B, track# on stack  E241 7D   0400               tst    side      is double sided?  E244 27   0F                 beq    05f       no                     *  E246 74   0403               lsr    track     track# / 2  E249 24   0A                 bcc    05f       even track                     * odd track, add bias  E24B 7C   0402               inc    lside                     * TEST Biased here!  E24E 7D   0407               tst    unbias  E251 26   02                 bne    05f       yes  E253 EB   04                 addb   4,x       biased sector#                     *  E255 5C            05        incb             1 relative  E256 F7   0404               stb    sector    set sector#                     *  E259 B6   0403     08        lda    track  E25C A1   02                 cmpa   2,x       test against max  E25E 22   03                 bhi    91f  E260 4F            88        clra             set OK  E261 35   F0                 puls   x,y,u,pc                     * errors  E263 86   10       91        lda    #FS_SKER  track > max  E265 35   F0                 puls   x,y,u,pc                                          *                     * fseek, move head to track#, set registers                     * Y = hardware base                     *               E267  fseek     equ    *  E267 34   70                 pshs   x,y,u  E269 7D   0402               tst    lside  E26C 27   06                 beq    lsk1  E26E                         oime   LA_SID,latch 1 = side 1  E26E 71                      fcb    $71  E26F 10                      fcb    LA_SID  E270 0405                    fdb    latch                               endm  E272 20   04                 bra    lsk2  E274               lsk1      aime   !LA_SID,latch 0 = side 0  E274 72                      fcb    $72  E275 EF                      fcb    !LA_SID  E276 0405                    fdb    latch                               endm                     *  E278 B6   0405     lsk2      lda    latch  E27B 34   02                 pshs   a  E27D 7D   0401               tst    dens  E280 26   06                 bne    lsk3  E282                         oime   LA_SDN,latch  E282 71                      fcb    $71  E283 20                      fcb    LA_SDN  E284 0405                    fdb    latch                               endm  E286 20   04                 bra    lsk4  E288               lsk3      aime   !LA_SDN,latch  E288 72                      fcb    $72  E289 DF                      fcb    !LA_SDN  E28A 0405                    fdb    latch                               endm                     *  E28C B6   0405     lsk4      lda    latch  E28F A1   E0                 cmpa   0,s+  E291 27   08                 beq    lsk5  E293 84   7F                 anda   #$7f      trigger headsettling delay  E295 A7   24                 sta    fo4lat,y  E297 1E   11                 exg    x,x  E299 8A   80                 ora    #$80                     *  E29B A7   24       lsk5      sta    fo4lat,y                     *  E29D B6   0404               lda    sector  E2A0 88   00                 eora   #EOR4FDC  E2A2 A7   22                 sta    fo2sec,y  set sector register                     *  E2A4 B6   0403               lda    track  E2A7 88   00                 eora   #EOR4FDC  E2A9 A1   21                 cmpa   fo2trk,y  E2AB 27   11                 beq    04f                     *  E2AD A7   23                 sta    fo2dat,y  E2AF 86   18                 lda    #FD_SEK  E2B1 BA   E000               ora    steprt    update steprate  E2B4 88   00                 eora   #EOR4FDC  E2B6 A7   A4                 sta    fo2cmd,y                     *  E2B8 A6   28       01        lda    fo4sta,y  E2BA 85   40                 bita   #ST_INT  E2BC 27   FA                 beq    01b                     *  E2BE A6   A4       04        lda    fo2cmd,y  E2C0 88   00                 eora   #EOR4FDC                       E2C2 84   D9                 anda   #!(FS_TRK0|FS_IDX|FS_HLD) remove these from status                     * check if we need to pass write protect  E2C4 D6   00                 ldb    flpdpr+flrflg  E2C6 C5   10                 bitb   #%00010000 command is read  E2C8 27   02                 beq    02f  E2CA 84   BF                 anda   #!FS_WRP                     *  E2CC 35   F0       02        puls   x,y,u,pc                                          *                     * chkrdy, check if drive is ready                     * Y = fdcbase                     *  E2CE C6   07       chkrdy    ldb    #7        multiply                     *  E2D0 8E   7FFF     10        ldx    #$7fff    long delay                     *  E2D3 B6   0405     11        lda    latch  E2D6 A7   24                 sta    fo4lat,y  E2D8 A6   A4                 lda    fo2cmd,y  E2DA 88   00                 eora   #EOR4FDC  E2DC 2A   0A                 bpl    12f                     *  E2DE 30   1F                 leax   -1,x      decrement counter  E2E0 26   F1                 bne    11b                     *  E2E2 5A                      decb             multiply  E2E3 26   EB                 bne    10b                     *  E2E5 86   80                 lda    #FS_NRDY  E2E7 39                      rts                     *  E2E8 4F            12        clra  E2E9 39                      rts                                          *                     * restore, set drive at track 0                     * Y = fdcbase                     *  E2EA 86   08       restore   lda    #FD_RST  E2EC BA   E000               ora    steprt    adjust  E2EF 88   00                 eora   #EOR4FDC  E2F1 A7   A4                 sta    fo2cmd,y  E2F3 A6   28       20        lda    fo4sta,y  E2F5 6D   24                 tst    fo4lat,y  ??  E2F7 85   40                 bita   #ST_INT  E2F9 27   F8                 beq    20b  E2FB A6   A4                 lda    fo2cmd,y  E2FD 88   00                 eora   #EOR4FDC  E2FF 85   64                 bita   #00000100  E301 26   03                 bne    21f  E303 7F   0403               clr    track     update info  E306 39            21        rts                                          *                     * delay, spend some time , no registers affected                     *  E307 8D   00       delay     bsr    del1  E309 8D   00       del1      bsr    del2  E30B 34   76       del2      pshs   d,x,y,u  E30D 35   F6                 puls   d,x,y,u,pc                                          *                     * srchpm, search drive param table, used for track/sector calculations                     * Y = fdcbase                     *  E30F 34   70       srchpm    pshs   x,y,u  E311 8E   E32D               ldx    #fltabl   start table  E314 DC   0B                 ldd    flpdpr+fltsid get ttyset/ttyget bytes  E316 84   40                 anda   #%01000000 side bits  E318 C4   C1                 andb   #%11000001 dens bits  E31A 10A3 84       31        cmpd   0,x  E31D 27   09                 beq    30f  E31F 30   06                 leax   6,x       size of entry  E321 6D   02                 tst    2,x  E323 26   F5                 bne    31b  E325 8E   E32D               ldx    #flpdfl                     *  E328 BF   040D     30        stx    wrkprm  E32B 35   F0                 puls   x,y,u,pc                                    E32D  fltabl    equ    *  E32D 00 00 4C 00   flpdfl    fcb    $00,$00,76,0,8,0 FD-XS  E333 00 01 4C 00             fcb    $00,$01,76,0,16,0 FD-DX  E339 40 00 4F 00             fcb    $40,$00,79,0,5,0 F5-SX  E33F 40 01 4F 00             fcb    $40,$01,79,0,9,0 F5-XD  E345 40 41 4F 00             fcb    $40,$41,79,0,10,0 F5-XDE  E34B 00 81 4F 00             fcb    $00,$81,79,0,18,0 F3-XD  E351 00 C1 4F 00             fcb    $00,$c1,79,0,20,0 F3-XH  E357 00 00 00 00             fcb    0,0,0,0,0,0                                                                                    * all process registers stacked               E35D  nmihnd    equ    *                                          *                     * signal any interrupt at location in DPR                     *  E35D 86   55       rtiend    lda    #$55  E35F B7   03F8               sta    flpdpr+$03f8 give warning in DPR  E362 3B                      rti                       FFF0                         org    VECTORS                       FFF0 E35D                    fdb    rtiend  FFF2 E35D                    fdb    rtiend  FFF4 E35D                    fdb    rtiend  FFF6 E35D                    fdb    rtiend  FFF8 E35D                    fdb    rtiend  FFFA E35D                    fdb    rtiend  FFFC E35D                    fdb    nmihnd  FFFE E01A                    fdb    reset                                                    end0 Error(s) detected     5 Excessive BRANCH/JUMP(S) detectedSymbol Table:Absolute Symbols:A        0008   ALARMS   000A   B        0009   BARGS    0007   BSPCH    007F   BUFFER   0800   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CMDMSK   0091   CMDRSC   0011   CMDRTK   0091   CMDWSC   0001   CMDWTK   0081   CNCLC    0018   CR       000D   D        0000   DBG      0000   DBGA     0000   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOR4FDC  0000   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   F        000F   FALTS    0007   FDC      0AE9   FDNPR    0064   FD_ERR   0080   FD_FI0   00D0   FD_MRD   0098   FD_MWR   00B8   FD_RST   0008   FD_RTR   00E4   FD_SEK   0018   FD_SRD   0088   FD_SWR   00A8   FD_WTR   00F4   FF       0040   FLP      0000   FS_BUSY  0001   FS_CRC   0008   FS_DRQ   0002   FS_HLD   0020   FS_IDX   0002   FS_LOST  0004   FS_NRDY  0080   FS_RNF   0010   FS_RWOK  00D8   FS_SKER  0010   FS_TRK0  0004   FS_WRP   0040   GPP      0000   GPPDBG   0001   HANGS    0001   HOLDC    001B   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0000   KILLS    0005   LA_8_5   0040   LA_DS0   0009   LA_DS1   000A   LA_DS2   000C   LA_HLT   0080   LA_MOT   0008   LA_SDN   0020   LA_SEL0  0001   LA_SEL1  0002   LA_SEL2  0004   LA_SID   0010   LOOP     0000   MAPSIZ   000D   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   NET      0000   NFDNPR   0050   NL       000A   NODEV    FFFF   NONRAM   00F8   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMBASE  0400   RAMEND   0450   RDYWAIT  9C40   REGSIZ   0008   RESTM    0009   ROMBASE  E000   ROMDBG   0000   S        0004   SBUF     000C   SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   SPI      0000   STABPG   0001   STACKSZ  0040   STKOFS   0F38   ST_DRQ   0080   ST_INT   0040   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TIMES    0009   TRACS    0008   TTYIPR   FFF6   TTYOPR   FFEC   U        0003   UA       0001   UB       0002   UCC      0000   UD       0001   UIO      0000   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VECTORS  FFF0   W        0006   WAITPR   FFD8   WBUFPR   001E   WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   chkrdy   E2CE   clcpos   E20D   del1     E309   del2     E30B   delay    E307   dens     0401   do_rdsc  E109   do_rdtk  E151   do_wrsc  E12D   do_wrtk  E15D   drvsel   E002   fcp2io   03FD   fdcbas   8000   fend     E0E2   fend1    E0F1   fio2cp   03FC   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flerr    E0E0   flnwop   000A   flpack   E0F7   flpcmd   E105   flpdfl   E32D   flpdpr   0000   flpfifo  0020   flpint   03FE   flptel   03FF   flrflg   0000   flstat   0008   fltabl   E32D   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   fo2cmd   0000   fo2dat   0003   fo2sec   0002   fo2trg   000C   fo2trk   0001   fo4lat   0004   fo4sta   0008   frdblk   E1BA   frder    E12C   fseek    E267   fwder    E150   fwrblk   E1EF   latch    0405   lside    0402   lsk1     E274   lsk2     E278   lsk3     E288   lsk4     E28C   lsk5     E29B   lstdrv   0406   nmihnd   E35D   parstab  E006   reset    E01A   restore  E2EA   retry    040F   romstck  0450   rretry   E001   rtiend   E35D   sector   0404   setd0    E072   setd11   E07E   setd2    E08F   setd3    E093   setd9    E09A   side     0400   skretry  E09C   srchpm   E30F   step     040C   steprt   E000   track    0403   trkbuf   0800   trktab   0408   unbias   0407   warm     E042   wrkprm   040D   