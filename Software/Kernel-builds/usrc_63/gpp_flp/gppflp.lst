                     *                     * GPPFLPDRV, ROM code for CPU09GPP with 09FLP add-on                     *                     * supports:  read block 128,256,512 byte size                     *            write block 128,256,512 byte size                     *            read track 125kBit, 250kBit, 500 kBit rate                     *            write track 125kBit, 250 kBit, 500 kBit rate                     *                     *            supports 8", 5.25" and 3.5" in single /                     *            double side and single / double / high density                     *                     *                     *            runs with Interrupts disabled                     *                     *                     *                     *                     *                     *                     *                     *                               opt    lis,exp   |                               opt    nop                                          *                     *  for DEBUG program is RAM based                     *               E000  ROMBASE   equ    $E000                                    FFF0  VECTORS   equ    $FFF0                                                         0400  RAMBASE   equ    $0400     just above Dual Port Ram               0800  BUFFER    equ    $0800     track buffer                                    0040  STACKSZ   equ    64        enough?                                    9C40  RDYWAIT   equ    40000     delay count                                          * hardware dependent values               0009  LA_DS0    equ    %00001001 drive select 0               0006  LA_DS1    equ    %00000110 drive select 1                                          *                     * DPR, command exchange withe kernel                     *               0091  CMDMSK    equ    %10010001 command mask               0011  CMDRSC    equ    %00010001 read sector               0001  CMDWSC    equ    %00000001 write sector               0091  CMDRTK    equ    %10010001 read track               0081  CMDWTK    equ    %10000001 write track                       0400                         org    RAMBASE                       0400               side      rmb    1         intermediate data  0401               lside     rmb    1         latch side  0402               track     rmb    1  0403               sector    rmb    1  0404               latch     rmb    1  0405               lstdrv    rmb    1         last selected drive  0406               trktab    rmb    2         track numbers / drive  0408               unbias    rmb    1         unbiased sectors                                          *  0409               step      rmb    1         debug for progress  040A               wrkprm    rmb    2         pointer to drive info table entry  040C               retry     rmb    1         retry count                                                                 040D                         rmb    STACKSZ               044D  romstck   equ    *                                    044D  RAMEND    equ    *                       0800                         org    BUFFER  0800               trkbuf    rmb    12500     track buffer                       E000                         org    ROMBASE                                          *                     * configuration constants                     *  E000 00            steprt    fcb    0         step rate modifier  E001 04            rretry    fcb    4  E002 09 06         drvsel    fcb    LA_DS0,LA_DS1 driver select bytes  E004 11 00         parstab   fcb    CMDRSC,0  E006 E112                    fdb    do_rdsc  E008 01 00                   fcb    CMDWSC,0  E00A E139                    fdb    do_wrsc  E00C 91 00                   fcb    CMDRTK,0  E00E E160                    fdb    do_rdtk  E010 81 00                   fcb    CMDWTK,0  E012 E170                    fdb    do_wrtk  E014 0000 0000               fdb    0,0       end of table                                          *                     * cold start                     *               E018  reset     equ    *  E018                         seti  E018 1A   50                 orcc   #FF|IF                               endm  E01A 10CE 044D               lds    #romstck                     *  E01E 8E   E000               ldx    #flpdpr   go clear the Dual Port Ram  E021                         clrd  E021 104F                    fdb    $104f                               endm  E023 ED   81       01        std    0,x++  E025 8C   E3FF               cmpx   #flpdpr+flptel  E028 25   F9                 blo    01b                     *  E02A 8E   0400               ldx    #RAMBASE  E02D ED   81       02        std    0,x++  E02F 8C   044D               cmpx   #RAMEND  E032 25   F9                 blo    02b  E034 8E   E2FD               ldx    #flpdfl  E037 BF   040A               stx    wrkprm    set pointer                     *                     * normally the driver loops here                     *               E03A  warm      equ    *  E03A                         seti  E03A 1A   50                 orcc   #FF|IF                               endm  E03C 10CE 044D               lds    #romstck                     *  E040 BD   E10E     01        jsr    flpcmd  E043 27   FB                 beq    01b       wait                     *  E045 108E 8000               ldy    #fdcbas   floppy HW base address  E049 F6   E009               ldb    flpdpr+fldriv get drive  E04C 8E   E002               ldx    #drvsel  E04F 3A                      abx  E050 F6   0404               ldb    latch  E053 C4   F0                 andb   #$f0      leave these intact  E055 34   04                 pshs   b  E057 E6   84                 ldb    0,x  E059 EA   E0                 orb    0,s+  E05B F7   0404               stb    latch     clean higher bits                     * update other information  E05E B6   E00C               lda    flpdpr+fltden  E061 7F   0408               clr    unbias  E064 85   02                 bita   #%00000010 unbiased?  E066 27   04                 beq    setd6  E068 7C   0408               inc    unbias  E06B 4C                      inca  E06C 85   01       setd6     bita   #%00000001 DD?  E06E 26   06                 bne    setd7  E070                         oime   LA_SDN,latch set SD  E070 71                      fcb    $71  E071 20                      fcb    LA_SDN  E072 0404                    fdb    latch                               endm  E074 20   04                 bra    setd0  E076               setd7     aime   255-LA_SDN,latch set DD (latch bit = 0)  E076 72                      fcb    $72  E077 DF                      fcb    255-LA_SDN  E078 0404                    fdb    latch                               endm                     *  E07A B6   E00B     setd0     lda    flpdpr+fltsid  E07D 84   03                 anda   #%00000011 DS / UNBIASED  E07F B7   0400               sta    side      set side capabilities                     *  E082 B6   E00B     setd1     lda    flpdpr+fltsid  E085 85   40                 bita   #%01000000 5/8" select  E087 27   06                 beq    setd2  E089                         oime   LA_8_5,latch  E089 71                      fcb    $71  E08A 40                      fcb    LA_8_5  E08B 0404                    fdb    latch                               endm  E08D 20   04                 bra    setd3                     *  E08F               setd2     aime   255-LA_8_5,latch set 8" (latch bit = 0)  E08F 72                      fcb    $72  E090 BF                      fcb    255-LA_8_5  E091 0404                    fdb    latch                               endm  E093 F6   0404     setd3     ldb    latch  E096 E7   24                 stb    fo4lat,y  set latch                     *  E098 BD   E299               jsr    chkrdy    see if drive is on-line  E09B 4D                      tsta  E09C 26   45                 bne    flerr                     *  E09E B6   E00A               lda    flpdpr+flnwop new open?  E0A1 27   09                 beq    04f       yes, skip forced restore                     *                     * retry loops here                     *  E0A3 BD   E2B5     skretry   jsr    restore   restore drive  E0A6 84   95                 anda   #%10010101  E0A8 81   04                 cmpa   #%00000100 should be there  E0AA 26   37                 bne    flerr                     *  E0AC 7F   E00A     04        clr    flpdpr+flnwop remove flag                     *  E0AF C6   01                 ldb    #1        set progress  E0B1 F7   0409               stb    step                     *  E0B4 7F   E008               clr    flpdpr+flstat initialize error status                     *  E0B7 F6   0404               ldb    latch  E0BA E7   24                 stb    fo4lat,y  E0BC BD   E299               jsr    chkrdy    drive still ready?  E0BF 4D                      tsta  E0C0 26   21                 bne    flerr                     *  E0C2 BD   E2D9     06        jsr    srchpm    scan drive table                     *  E0C5 C6   02                 ldb    #2  E0C7 F7   0409               stb    step  E0CA B6   E000               lda    flpdpr+flrflg check command for valid  E0CD 84   91                 anda   #CMDMSK  E0CF 8E   E004               ldx    #parstab  search function  E0D2 A1   84       21        cmpa   0,x  E0D4 27   0A                 beq    20f  E0D6 30   04                 leax   4,x  E0D8 6D   84                 tst    0,x  E0DA 26   F6                 bne    21b                     *  E0DC 86   BF                 lda    #FD_ERR+63  E0DE 20   03                 bra    flerr                     *  E0E0 AD   98 02    20        jsr    [2,x]                     *  E0E3 B7   E008     flerr     sta    flpdpr+flstat                     *  E0E6 C6   07       fend      ldb    #7  E0E8 F7   0409               stb    step  E0EB 4D                      tsta             error  E0EC 27   0C                 beq    fend1  E0EE F6   040C               ldb    retry  E0F1 C8   01                 eorb   #1  E0F3 F7   040C               stb    retry >E0F6 1026 FFA9               lbne   skretry  E0FA 12            fend1     nop  E0FB 8D   03                 bsr    flpack                     *  E0FD 7E   E03A               jmp    warm                                          *                     *  write POSTBOX to other CPU I'm done                     *  E100 C6   06       flpack    ldb    #6  E102 F7   0409               stb    step  E105 7F   E3FF               clr    flpdpr+flptel acknowledge main CPU  E108 86   FF                 lda    #$ff  E10A B7   E3FE               sta    flpdpr+flpint tell him I'am done  E10D 39                      rts                                          *                     * flpcmd, test POSTBOX for new data from main CPU                     *  E10E B6   E3FF     flpcmd    lda    flpdpr+flptel command present?  E111 39                      rts                                          *                     * Y = fdcbase                     *               E112  do_rdsc   equ    *  E112 C6   03                 ldb    #3  E114 F7   0409               stb    step                     *  E117 BD   E20A               jsr    clcpos    block# -> trk/sec/sid  E11A 4D                      tsta  E11B 26   1B                 bne    frder     error                     *  E11D C6   04                 ldb    #4  E11F F7   0409               stb    step  E122 BD   E24A               jsr    fseek  E125 4D                      tsta  E126 26   10                 bne    frder                     *  E128 C6   05                 ldb    #5  E12A F7   0409               stb    step  E12D CE   E020               ldu    #flpdpr+flpfifo  E130 BE   E004               ldx    flpdpr+fltsiz  E133 86   88                 lda    #FD_SRD  E135 BD   E1CE               jsr    frdblk                     *  E138 39            frder     rts                                          *                     * Y = fdcbase                     *               E139  do_wrsc   equ    *  E139 C6   03                 ldb    #3  E13B F7   0409               stb    step                     *  E13E BD   E20A               jsr    clcpos    block# -> trk/sec/sid  E141 4D                      tsta  E142 26   1B                 bne    fwder     error                     *  E144 C6   04                 ldb    #4  E146 F7   0409               stb    step  E149 BD   E24A               jsr    fseek  E14C 4D                      tsta  E14D 26   10                 bne    fwder                     *  E14F C6   05                 ldb    #5  E151 F7   0409               stb    step  E154 CE   E020               ldu    #flpdpr+flpfifo  E157 BE   E004               ldx    flpdpr+fltsiz  E15A 86   AC                 lda    #FD_SWR  E15C BD   E1EC               jsr    fwrblk                     *  E15F 39            fwder     rts                                          *                     *TODO                     *               E160  do_rdtk   equ    *  E160 CE   0800               ldu    #trkbuf  E163 10BE E004               ldy    flpdpr+fltsiz  E167 86   E4                 lda    #FD_RTR >E169 BD   E1CE               jsr    frdblk                      >E16C BD   E100               jsr    flpack  E16F 39                      rts                                          *                     * We arrive here when the DPR contains the first BUFSIZ                     * bytes of the track image                     *               E170  do_wrtk   equ    *  E170 34   70                 pshs   x,y,u  E172 8E   0800               ldx    #trkbuf                     * copy DPR data to trkbuf  E175 12            03        nop  E176 CE   E020               ldu    #flpdpr+flpfifo  E179                         ldwi   BUFSIZ  E179 1086                    fdb    $1086  E17B 0200                    fdb    BUFSIZ                               endm  E17D                         tfm1   U,X  E17D 1138                    fdb    $1138  E17F 31                      fcb    U<<4|X                               endm  E180 FC   E006               ldd    flpdpr+fltxfr  E183 10B3 E004               cmpd   flpdpr+fltsiz we have all  E187 24   0D                 bhs    02f  E189 4F                      clra  E18A BD   E100               jsr    flpack    tell hime I took it                     *  E18D 6D   28       01        tst    fo4sta,y  keep motor running  E18F BD   E10E               jsr    flpcmd    wait for next data  E192 27   F9                 beq    01b       postbox empty  E194 20   DF                 bra    03b       loop until all                     * all data present  E196 12            02        nop              TRAP  E197 AE   E4                 ldx    0,s       old X  E199 C6   03                 ldb    #3  E19B F7   0409               stb    step                     *  E19E B6   E003               lda    flpdpr+flblkl track address << 1 + side bit  E1A1 5F                      clrb  E1A2 44                      lsra             strip side bit  E1A3 24   01                 bcc    08f  E1A5 5C                      incb  E1A6 F7   0401     08        stb    lside                     *  E1A9 B7   0402               sta    track  E1AC 86   01                 lda    #1  E1AE B7   0403               sta    sector                     *  E1B1 C6   04                 ldb    #4  E1B3 F7   0409               stb    step  E1B6 BD   E24A               jsr    fseek  E1B9 4D                      tsta  E1BA 26   10                 bne    10f                     *                     * restore the registers for the write                     *  E1BC C6   05                 ldb    #5  E1BE F7   0409               stb    step  E1C1 CE   0800               ldu    #trkbuf  E1C4 BE   E004               ldx    flpdpr+fltsiz  E1C7 86   F4                 lda    #FD_WTR >E1C9 BD   E1EC               jsr    fwrblk                     *  E1CC 35   F0       10        puls   x,y,u,pc                                          *                     * code routine, to read one dataset from FDC                     * U = buffer address,                     * Y = base address hardware                     * X = count                     * A = command                     *                     * can read sector or track                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1CE  frdblk    equ    *  E1CE 34   70                 pshs   x,y,u                     *  E1D0 88   00                 eora   #EOR4FDC  E1D2 A7   A4                 sta    fo2cmd,y                     *  E1D4 1A   50       01        orcc   #$50      disable ints  E1D6 20   06                 bra    03f                     * loop here  E1D8 A6   23       02        lda    fo2dat,y  get data  E1DA 88   00                 eora   #EOR4FDC  E1DC A7   C0                 sta    0,u+      transfer                     * poll fdc for DRQ  E1DE A6   28       03        lda    fo4sta,y  E1E0 2B   F6                 bmi    02b  E1E2 85   40                 bita   #ST_INT   INT  E1E4 27   F8                 beq    03b                     *  E1E6 A6   A4                 lda    fo2cmd,y  read status  E1E8 88   00                 eora   #EOR4FDC                     *  E1EA 35   F0       99        puls   x,y,u,pc                                          *                     * code routine, to write one dataset to the FDC                     * U = buffer address                     * Y = hardware base                     * X = count                     * A = command                     *                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1EC  fwrblk    equ    *  E1EC 34   70                 pshs   x,y,u                     *  E1EE 88   00                 eora   #EOR4FDC  E1F0 A7   A4                 sta    fo2cmd,y                     *  E1F2 1A   50       01        orcc   #$50      disable ints  E1F4 20   06                 bra    03f                       E1F6 A6   C0       02        lda    0,u+  E1F8 88   00                 eora   #EOR4FDC  E1FA A7   23                 sta    fo2dat,y  put data                     *  E1FC A6   28       03        lda    fo4sta,y  E1FE 2B   F6                 bmi    02b  E200 85   40                 bita   #ST_INT   INT  E202 27   F8                 beq    03b                     *  E204 A6   A4                 lda    fo2cmd,y  read status  E206 88   00                 eora   #EOR4FDC                     *  E208 35   F0       99        puls   x,y,u,pc                                          *                     * clcpos, transfer block# into track/sector/side                     *                     * Y = fdcbase                     *               E20A  clcpos    equ    *  E20A 34   70                 pshs   x,y,u  E20C 7F   0401               clr    lside     result side of calc                     *  E20F BE   040A               ldx    wrkprm    fresh copy of drive params  E212 FC   E002               ldd    flpdpr+flblkm block no M/L                     *  E215 10BE E004               ldy    flpdpr+fltsiz check transfer size                     * calculate  E219 6F   E2       00        clr    0,-s      track = 0                     *  E21B A3   03       02        subd   3,x       sec/trk  E21D 2B   04                 bmi    01f                     *  E21F 6C   E4                 inc    0,s       up track #  E221 20   F8                 bra    02b                     *  E223 E3   03       01        addd   3,x       adjust                     * sector in B, track# on stack  E225 7D   0400               tst    side      is double sided?  E228 27   0E                 beq    05f       no                     *  E22A 64   E4                 lsr    0,s       track# / 2  E22C 24   0A                 bcc    05f       even track                     * odd track, add bias  E22E 7C   0401               inc    lside                     * TEST Biased here! TODO  E231 7D   0408               tst    unbias  E234 26   02                 bne    05f       no  E236 EB   04                 addb   4,x       biased sector#                     *  E238 5C            05        incb             1 relative  E239 F7   0403               stb    sector    set sector#                     *  E23C 35   02                 puls   a         track# from stack  E23E B7   0402               sta    track     set track#  E241 A1   02       08        cmpa   2,x       test against max                     **!!    bhi     91f  E243 4F                      clra             set OK  E244 35   F0                 puls   x,y,u,pc                     * errors  E246 86   10       91        lda    #FS_SKER  track > max  E248 35   F0                 puls   x,y,u,pc                     *                     *                     * fseek, move head to track#, set registers                     * Y = hardware base                     *               E24A  fseek     equ    *  E24A 34   70                 pshs   x,y,u  E24C                         oime   $80,latch  E24C 71                      fcb    $71  E24D 80                      fcb    $80  E24E 0404                    fdb    latch                               endm  E250 7D   0401               tst    lside  E253 27   06                 beq    lsk1  E255                         oime   LA_SID,latch 1 = side 1  E255 71                      fcb    $71  E256 10                      fcb    LA_SID  E257 0404                    fdb    latch                               endm  E259 20   04                 bra    lsk2  E25B               lsk1      aime   255-LA_SID,latch 0 = side 0  E25B 72                      fcb    $72  E25C EF                      fcb    255-LA_SID  E25D 0404                    fdb    latch                               endm  E25F B6   0404     lsk2      lda    latch  E262 A7   24                 sta    fo4lat,y                     *  E264 B6   0403               lda    sector    set sector number  E267 88   00                 eora   #EOR4FDC  E269 A7   22                 sta    fo2sec,y                     *  E26B B6   0402               lda    track  E26E 88   00                 eora   #EOR4FDC  E270 A1   21                 cmpa   fo2trk,y                     **!!    beq     04f                     *  E272 A7   23                 sta    fo2dat,y  E274 86   18                 lda    #FD_SEK  E276 BA   E000               ora    steprt    update steprate  E279 88   00                 eora   #EOR4FDC  E27B A7   A4                 sta    fo2cmd,y                     *  E27D A6   28       01        lda    fo4sta,y  E27F 85   40                 bita   #ST_INT  E281 27   FA                 beq    01b                     *  E283 B6   0404     04        lda    latch  E286 A7   24                 sta    fo4lat,y  E288 A6   A4                 lda    fo2cmd,y  E28A 88   00                 eora   #EOR4FDC                       E28C 84   D9                 anda   #!(FS_TRK0|FS_IDX|FS_HLD) remove these from status                     * check if we need to pass write protect  E28E F6   E000               ldb    flpdpr+flrflg  E291 C5   10                 bitb   #%00010000 command is read  E293 27   02                 beq    02f  E295 84   BF                 anda   #!FS_WRP                       E297 35   F0       02        puls   x,y,u,pc                                          *                     * chkrdy, check if drive is ready                     * Y = fdcbase                     *  E299 C6   07       chkrdy    ldb    #7        multiply                     *  E29B 8E   7FFF     10        ldx    #$7fff    long delay                     *  E29E A6   A4       11        lda    fo2cmd,y  E2A0 88   00                 eora   #EOR4FDC  E2A2 2A   0E                 bpl    12f                     *  E2A4 B6   0404               lda    latch  E2A7 A7   24                 sta    fo4lat,y  E2A9 30   1F                 leax   -1,x      decrement counter  E2AB 26   F1                 bne    11b                     *  E2AD 5A                      decb             multiply  E2AE 26   EB                 bne    10b                     *  E2B0 86   80                 lda    #FS_NRDY                     *  E2B2 84   80       12        anda   #%10000000 only ready is of interest  E2B4 39                      rts                                          *                     * restore, set drive at track 0                     * Y = fdcbase                     *  E2B5 5F            restore   clrb  E2B6 86   08       19        lda    #FD_RST  E2B8 BA   E000               ora    steprt    adjust  E2BB 88   00                 eora   #EOR4FDC  E2BD A7   A4                 sta    fo2cmd,y  E2BF A6   28       20        lda    fo4sta,y  E2C1 6D   24                 tst    fo4lat,y  ??  E2C3 85   40                 bita   #ST_INT  E2C5 27   F8                 beq    20b  E2C7 7F   0402               clr    track     update info  E2CA A6   A4                 lda    fo2cmd,y  E2CC 88   00                 eora   #EOR4FDC  E2CE 85   10                 bita   #FS_SKER  E2D0 27   06                 beq    21f  E2D2 5D                      tstb  E2D3 26   03                 bne    21f  E2D5 5C                      incb  E2D6 20   DE                 bra    19b                     *  E2D8 39            21        rts                                          *                     * srchpm, search drive param table, used for track/sector calculations                     * Y = fdcbase                     *  E2D9 34   70       srchpm    pshs   x,y,u  E2DB 8E   E2FD               ldx    #fltabl   start table  E2DE FC   E00B               ldd    flpdpr+fltsid get ttyset/ttyget bytes  E2E1 84   40                 anda   #%01000000 side bits  E2E3 C5   02                 bitb   #%00000010 non bias?  E2E5 27   01                 beq    33f  E2E7 5C                      incb  E2E8 C4   C1       33        andb   #%11000001 dens bits  E2EA 10A3 84       31        cmpd   0,x  E2ED 27   09                 beq    30f  E2EF 30   06                 leax   6,x       size of entry  E2F1 6D   02                 tst    2,x  E2F3 26   F5                 bne    31b  E2F5 8E   E2FD               ldx    #flpdfl                     *  E2F8 BF   040A     30        stx    wrkprm  E2FB 35   F0                 puls   x,y,u,pc                                    E2FD  fltabl    equ    *  E2FD 00 00 4C 00   flpdfl    fcb    $00,$00,76,0,8,0 FD-XS  E303 00 01 4C 00             fcb    $00,$01,76,0,16,0 FD-DX  E309 40 00 4F 00             fcb    $40,$00,79,0,5,0 F5-SX  E30F 40 01 4F 00             fcb    $40,$01,79,0,9,0 F5-XD  E315 40 41 4F 00             fcb    $40,$41,79,0,10,0 F5-XDE  E31B 00 81 4F 00             fcb    $00,$81,79,0,18,0 F3-XD  E321 00 C1 4F 00             fcb    $00,$c1,79,0,20,0 F3-XH  E327 00 00 00 00             fcb    0,0,0,0,0,0                                          * all process registers stacked               E32D  nmihnd    equ    *                       E32D 3B                      rti                                          *                     * signal any interrupt at location in DPR                     *  E32E 86   55       rtiend    lda    #$55  E330 B7   E3F8               sta    flpdpr+$03f8 give warning in DPR  E333 3B                      rti                       FFF0                         org    VECTORS                       FFF0 E32E                    fdb    rtiend  FFF2 E32E                    fdb    rtiend  FFF4 E32E                    fdb    rtiend  FFF6 E32E                    fdb    rtiend  FFF8 E32E                    fdb    rtiend  FFFA E32E                    fdb    rtiend  FFFC E32D                    fdb    nmihnd  FFFE E018                    fdb    reset                                                    end0 Error(s) detected     4 Excessive BRANCH/JUMP(S) detectedSymbol Table:Absolute Symbols:A        0008   ALARMS   000A   B        0009   BARGS    0007   BSPCH    007F   BUFFER   0800   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CMDMSK   0091   CMDRSC   0011   CMDRTK   0091   CMDWSC   0001   CMDWTK   0081   CNCLC    0018   CR       000D   D        0000   DBG      0001   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOR4FDC  0000   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   F        000F   FALTS    0007   FDC      0AE9   FDNPR    0064   FD_ERR   0080   FD_FIN   00D0   FD_MRD   0098   FD_MWR   00BC   FD_RST   0008   FD_RTR   00E4   FD_SEK   0018   FD_SRD   0088   FD_SWR   00AC   FD_WTR   00F4   FF       0040   FLP      0001   FS_BUSY  0001   FS_CRC   0008   FS_DRQ   0002   FS_HLD   0020   FS_IDX   0002   FS_LOST  0004   FS_NRDY  0080   FS_RNF   0010   FS_RWOK  00D8   FS_SKER  0010   FS_TRK0  0004   FS_WRP   0040   GPP      0000   HANGS    0001   HOLDC    001B   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0001   KILLS    0005   LA_8_5   0040   LA_DS0   0009   LA_DS1   0006   LA_HLT   0080   LA_SDN   0020   LA_SID   0010   MAPSIZ   000D   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   NET      0000   NFDNPR   0050   NL       000A   NODEV    FFFF   NONRAM   00F8   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMBASE  0400   RAMEND   044D   RDYWAIT  9C40   REGSIZ   0008   RESTM    0009   ROMBASE  E000   ROMDBG   0000   S        0004   SBUF     000C   SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   SPI      0000   STABPG   0001   STACKSZ  0040   STKOFS   0F38   ST_DRQ   0080   ST_INT   0040   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TIMES    0009   TRACS    0008   TTYIPR   FFF6   TTYOPR   FFEC   U        0003   UA       0001   UB       0002   UCC      0000   UD       0001   UIO      0000   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VECTORS  FFF0   W        0006   WAITPR   FFD8   WBUFPR   001E   WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   chkrdy   E299   clcpos   E20A   do_rdsc  E112   do_rdtk  E160   do_wrsc  E139   do_wrtk  E170   drvsel   E002   fcp2io   03FD   fdcbas   8000   fend     E0E6   fend1    E0FA   fio2cp   03FC   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flerr    E0E3   flnwop   000A   flpack   E100   flpcmd   E10E   flpdfl   E2FD   flpdpr   E000   flpfifo  0020   flpint   03FE   flptel   03FF   flrflg   0000   flstat   0008   fltabl   E2FD   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   fo2cmd   0000   fo2dat   0003   fo2sec   0002   fo2trg   000C   fo2trk   0001   fo4lat   0004   fo4sta   0008   frdblk   E1CE   frder    E138   fseek    E24A   fwder    E15F   fwrblk   E1EC   latch    0404   lside    0401   lsk1     E25B   lsk2     E25F   lstdrv   0405   nmihnd   E32D   parstab  E004   reset    E018   restore  E2B5   retry    040C   romstck  044D   rretry   E001   rtiend   E32E   sector   0403   setd0    E07A   setd1    E082   setd2    E08F   setd3    E093   setd6    E06C   setd7    E076   side     0400   skretry  E0A3   srchpm   E2D9   step     0409   steprt   E000   track    0402   trkbuf   0800   trktab   0406   unbias   0408   warm     E03A   wrkprm   040A   