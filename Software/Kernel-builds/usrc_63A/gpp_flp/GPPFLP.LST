                     *                     * GPPFLPDRV, ROM code for CPU09GPP with 09FLP add-on                     *                     * 2021-03-05: write track, no retry. return error if drive/diskette absent                     *                     * 2021-04-30: minor bug fixes, different approach for WD2791                     *                     * supports:  read block 128,256,512 byte size                     *            write block 128,256,512 byte size                     *            read track 125kBit, 250kBit, 500 kBit rate                     *            write track 125kBit, 250 kBit, 500 kBit rate                     *                     *            supports 8", 5.25" and 3.5" in single /                     *            double side and single / double / high density                     *                     *                     *            runs with Interrupts disabled                     *            almost no 63X09 code                     *                     *                     * compatibillity with FLEX improved                     *                     *                     *                     *                     *                     *                     *                     *                     *                               opt    lis,exp   |                               opt    nop                                          *                     *  for DEBUG program is RAM based                     *               E000  ROMBASE   equ    $E000                                    FFF0  VECTORS   equ    $FFF0                                                         0400  RAMBASE   equ    $0400     just above Dual Port Ram               0800  BUFFER    equ    $0800     track buffer                                    0040  STACKSZ   equ    64        enough?                                    9C40  RDYWAIT   equ    40000     delay count                                          * hardware dependent values               0009  LA_DS0    equ    LA_SEL0|LA_MOT drive select 0               000A  LA_DS1    equ    LA_SEL1|LA_MOT drive select 1               000C  LA_DS2    equ    LA_SEL2|LA_MOT drive select 2                                          *                     * DPR, command exchange withe kernel                     *               0091  CMDMSK    equ    %10010001 command mask               0011  CMDRSC    equ    %00010001 read sector               0001  CMDWSC    equ    %00000001 write sector               0091  CMDRTK    equ    %10010001 read track               0081  CMDWTK    equ    %10000001 write track                                                               * for a WD2793 (default) leave this at 0                     * for a WD2791 set it to 1               0000  WD2791    set    0                       0400                         org    RAMBASE                       0400               side      rmb    1         work side  0401               dens      rmb    1         work dens  0402               lside     rmb    1         actual latch side  0403               track     rmb    1  0404               sector    rmb    1  0405               latch     rmb    1         latch backup  0406               lstdrv    rmb    1         last selected drive  0407               unbias    rmb    1         unbiased sectors  0408               trktab    rmb    4         track numbers / drive                                          *  040C               step      rmb    1         debug for progress  040D               wrkprm    rmb    2         pointer to drive info table entry  040F               retry     rmb    1         retry count                       0410                         rmb    STACKSZ               0450  romstck   equ    *                                    0450  RAMEND    equ    *                       0800                         org    BUFFER  0800               trkbuf    rmb    12500     track buffer                       E000                         org    ROMBASE                                          *                     * configuration constants                     *  E000 00            steprt    fcb    0         step rate modifier  E001 02            rretry    fcb    2  E002 09 0A 0C 00   drvsel    fcb    LA_DS0,LA_DS1,LA_DS2,0 driver select bytes                     *  E006 11 00         parstab   fcb    CMDRSC,0  E008 E10D                    fdb    do_rdsc  E00A 01 00                   fcb    CMDWSC,0  E00C E131                    fdb    do_wrsc  E00E 91 00                   fcb    CMDRTK,0  E010 E155                    fdb    do_rdtk  E012 81 00                   fcb    CMDWTK,0  E014 E161                    fdb    do_wrtk  E016 0000 0000               fdb    0,0       end of table                                          *                     * cold start                     *               E01A  reset     equ    *  E01A 1A   50                 orcc   #$50  E01C 10CE 0450               lds    #romstck  E020 86   80                 lda    #fdbasp  E022 1F   8B                 tfr    a,dp               0080            setdp  fdbasp                     * NATIVE 63X09 !!  E024 11 3D 03                fcb    $11,$3d,$03 6309                     *  E027 8E   0000               ldx    #flpdpr   go clear the Dual Port Ram  E02A 4F                      clra  E02B 5F                      clrb  E02C ED   81       01        std    0,x++  E02E 8C   03FF               cmpx   #flpdpr+flptel  E031 25   F9                 blo    01b                     *  E033 8E   0400               ldx    #RAMBASE  E036 ED   81       02        std    0,x++  E038 8C   0450               cmpx   #RAMEND  E03B 25   F9                 blo    02b                     *  E03D 8E   E31B               ldx    #flpdfl  E040 BF   040D               stx    wrkprm    set pointer                     *                     * normally the driver loops here                     *               E043  warm      equ    *  E043 1A   50                 orcc   #$50  E045 10CE 0450               lds    #romstck                     *  E049 BD   E109     01        jsr    flpcmd    new message from main CPU  E04C 27   FB                 beq    01b       wait                     *  E04E F6   0009               ldb    flpdpr+fldriv get drive  0,1,2  E051 8E   E002               ldx    #drvsel  E054 3A                      abx  E055 F6   0405               ldb    latch  E058 C4   F8                 andb   #$f8      leave these intact  E05A 34   04                 pshs   b  E05C E6   84                 ldb    0,x  E05E EA   E0                 orb    0,s+  E060 F7   0405               stb    latch     clean higher bits                     *                     * update other settings                     *  E063 B6   E001               lda    rretry    rom setting  E066 B7   040F               sta    retry                     * test DD  E069 B6   000C               lda    flpdpr+fltden  E06C 84   01                 anda   #%00000001 DD?  E06E B7   0401               sta    dens                     * test DS, + unbiased  E071 B6   000B     setd0     lda    flpdpr+fltsid  E074 7F   0407               clr    unbias  E077 85   02                 bita   #%00000010  E079 27   03                 beq    setd11  E07B 7C   0407               inc    unbias    unbiased  E07E 84   01       setd11    anda   #%00000001 2 sided  E080 B7   0400               sta    side      set side capabilities                     * test 5"/8"  E083 F6   0405               ldb    latch  E086 B6   000B               lda    flpdpr+fltsid  E089 85   40                 bita   #%01000000 5/8" select  E08B 27   04                 beq    setd2  E08D CA   40                 orb    #LA_8_5  E08F 20   02                 bra    setd3                     *  E091 C4   BF       setd2     andb   #255-LA_8_5  E093 CA   80       setd3     orb    #$80  E095 F7   0405               stb    latch  E098 D7   04                 stb    <fo4lat   set latch                     *                     * everything is set                     *  E09A BD   E2C1               jsr    chkrdy    see if drive is on-line  E09D 4D                      tsta  E09E 26   43                 bne    flerr                     * if new open force restore  E0A0 B6   000A               lda    flpdpr+flnwop new open?  E0A3 27   09                 beq    04f       yes, skip forced restore                     *                     * retry loops here                     *  E0A5 BD   E2DB     skretry   jsr    restore   restore drive  E0A8 84   15                 anda   #%00010101  E0AA 81   04                 cmpa   #%00000100 should be there  E0AC 26   35                 bne    flerr                     *  E0AE 7F   000A     04        clr    flpdpr+flnwop remove flag                     *  E0B1 C6   01                 ldb    #1        set progress  E0B3 F7   040C               stb    step                     *  E0B6 7F   0008               clr    flpdpr+flstat initialize return status                     *  E0B9 BD   E2C1               jsr    chkrdy    drive still ready?  E0BC 4D                      tsta  E0BD 26   24                 bne    flerr                     *  E0BF BD   E2FC     06        jsr    srchpm    scan drive table                     *  E0C2 C6   02                 ldb    #2  E0C4 F7   040C               stb    step  E0C7 B6   0000               lda    flpdpr+flrflg check command for valid  E0CA 84   91                 anda   #CMDMSK  E0CC 8E   E006               ldx    #parstab  search function  E0CF A1   84       21        cmpa   0,x  E0D1 27   0D                 beq    20f  E0D3 30   04                 leax   4,x  E0D5 6D   84                 tst    0,x  E0D7 26   F6                 bne    21b                     *  E0D9 86   BF                 lda    #FD_ERR+63  E0DB B7   0008               sta    flpdpr+flstat  E0DE 20   15                 bra    fend1                     *  E0E0 AD   98 02    20        jsr    [2,x]                     *  E0E3 B7   0008     flerr     sta    flpdpr+flstat                     *  E0E6 C6   07       fend      ldb    #7  E0E8 F7   040C               stb    step  E0EB 4D                      tsta             error  E0EC 27   07                 beq    fend1  E0EE 7A   040F               dec    retry >E0F1 1026 FFB0               lbne   skretry  E0F5 12            fend1     nop  E0F6 8D   03                 bsr    flpack    tell main CPU about it                     *  E0F8 7E   E043               jmp    warm                                          *                     *  write POSTBOX to other CPU I'm done                     *  E0FB C6   08       flpack    ldb    #8  E0FD F7   040C               stb    step  E100 7F   03FF               clr    flpdpr+flptel acknowledge main CPU  E103 86   FF                 lda    #$ff  E105 B7   03FE               sta    flpdpr+flpint tell him I'am done  E108 39                      rts                                          *                     * flpcmd, test INTBOX for new data from main CPU                     *  E109 B6   03FF     flpcmd    lda    flpdpr+flptel command present?  E10C 39                      rts                                          *                     * Y = fdcbase                     *               E10D  do_rdsc   equ    *  E10D C6   03                 ldb    #3  E10F F7   040C               stb    step                     *  E112 BD   E20B               jsr    clcpos    block# -> trk/sec/sid  E115 4D                      tsta  E116 26   18                 bne    frder     error                     *  E118 C6   04                 ldb    #4  E11A F7   040C               stb    step  E11D BD   E269               jsr    fseek  E120 4D                      tsta  E121 26   0D                 bne    frder                     *  E123 C6   05                 ldb    #5  E125 F7   040C               stb    step  E128 CE   0020               ldu    #flpdpr+flpfifo  E12B 86   88                 lda    #FD_SRD  E12D BD   E1C6               jsr    frdblk                     *  E130 39            frder     rts                                          *                     * Y = fdcbase                     *               E131  do_wrsc   equ    *  E131 C6   03                 ldb    #3  E133 F7   040C               stb    step                     *  E136 BD   E20B               jsr    clcpos    block# -> trk/sec/sid  E139 4D                      tsta  E13A 26   18                 bne    fwder     error                     *  E13C C6   04                 ldb    #4  E13E F7   040C               stb    step  E141 BD   E269               jsr    fseek  E144 4D                      tsta  E145 26   0D                 bne    fwder                     *  E147 C6   05                 ldb    #5  E149 F7   040C               stb    step  E14C CE   0020               ldu    #flpdpr+flpfifo  E14F 86   A8                 lda    #FD_SWR  E151 BD   E1F3               jsr    fwrblk                     *  E154 39            fwder     rts                                          *                     *TODO                     *               E155  do_rdtk   equ    *  E155 CE   0800               ldu    #trkbuf  E158 86   E4                 lda    #FD_RTR >E15A BD   E1C6               jsr    frdblk                      >E15D BD   E0FB               jsr    flpack  E160 39                      rts                                          *                     * We arrive here when the DPR contains the first BUFSIZ                     * bytes of the track image                     *               E161  do_wrtk   equ    *  E161 34   70                 pshs   x,y,u  E163 8E   0800               ldx    #trkbuf                     * copy DPR data to trkbuf  E166 12            03        nop  E167 CE   0020               ldu    #flpdpr+flpfifo  E16A                         ldwi   BUFSIZ    immediate load  E16A 1086                    fdb    $1086  E16C 0200                    fdb    BUFSIZ                               endm  E16E                         tfm1   U,X  E16E 1138                    fdb    $1138  E170 31                      fcb    U<<4|X                               endm  E171 FC   0006               ldd    flpdpr+fltxfr  E174 10B3 0004               cmpd   flpdpr+fltsiz we have all  E178 24   0D                 bhs    02f  E17A 4F                      clra  E17B BD   E0FB               jsr    flpack    tell hime I took it                     *  E17E 0D   08       01        tst    <fo4sta   keep motor running >E180 BD   E109               jsr    flpcmd    wait for next data  E183 27   F9                 beq    01b       postbox empty  E185 20   DF                 bra    03b       loop until all                     * all data present  E187 12            02        nop              TRAP  E188 86   01                 lda    #1        no retry!  E18A B7   040F               sta    retry  E18D AE   E4                 ldx    0,s       old X  E18F C6   03                 ldb    #3  E191 F7   040C               stb    step                     *  E194 B6   0003               lda    flpdpr+flblkl track address << 1 + side bit  E197 5F                      clrb  E198 44                      lsra             strip side bit  E199 24   01                 bcc    08f  E19B 5C                      incb  E19C F7   0402     08        stb    lside     format track on other side                     *  E19F B7   0403               sta    track  E1A2 26   03                 bne    18f       make sure we  start at track 00  E1A4 BD   E2DB               jsr    restore   restore if target is 0                     *  E1A7 86   01       18        lda    #1  E1A9 B7   0404               sta    sector                     *  E1AC C6   04                 ldb    #4  E1AE F7   040C               stb    step  E1B1 BD   E269               jsr    fseek  E1B4 4D                      tsta  E1B5 26   0D                 bne    10f                     *                     * restore the registers for the write                     *  E1B7 C6   05                 ldb    #5  E1B9 F7   040C               stb    step  E1BC CE   0800               ldu    #trkbuf  E1BF 86   F4                 lda    #FD_WTR >E1C1 BD   E1F3               jsr    fwrblk                     *  E1C4 35   F0       10        puls   x,y,u,pc                                          *                     * code routine, to read one dataset from FDC                     * U = buffer address,                     * Y = base address hardware                     * A = command                     *                     * can read sector or track                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1C6  frdblk    equ    *  E1C6 34   70                 pshs   x,y,u  E1C8 C6   1F                 ldb    #31       very long              create timeout  E1CA 8E   0000               ldx    #0        65536*2*25/4 cycles                     *  E1CD 97   00                 sta    <fo2cmd                     *  E1CF 1A   50       01        orcc   #$50      disable ints  E1D1 20   04                 bra    03f                     * loop here  E1D3 96   03       02        lda    <fo2dat   get data  E1D5 A7   C0                 sta    0,u+      transfer                     * poll fdc for DRQ  E1D7 96   08       03        lda    <fo4sta  E1D9 2B   F8                 bmi    02b       DRQ  E1DB 30   01                 leax   1,x       count up  E1DD 26   03                 bne    11f  E1DF 5A                      decb             at zero dec B  E1E0 27   08                 beq    98f       if zero abort  E1E2 85   40       11        bita   #ST_INT   INT  E1E4 27   F1                 beq    03b                     *  E1E6 96   00       97        lda    <fo2cmd   read status                     *  E1E8 35   F0       99        puls   x,y,u,pc                       E1EA 86   D0       98        lda    #FD_FI0   force interrupt  E1EC 97   00                 sta    <fo2cmd  E1EE BD   E2F4               jsr    delay  E1F1 20   F3                 bra    97b                                          *                     * code routine, to write one dataset to the FDC                     * U = buffer address                     * Y = hardware base                     * A = command                     *                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E1F3  fwrblk    equ    *  E1F3 34   70                 pshs   x,y,u                     *  E1F5 97   00                 sta    <fo2cmd                     *  E1F7 1A   50       01        orcc   #$50      disable ints  E1F9 20   04                 bra    03f                       E1FB A6   C0       02        lda    0,u+  E1FD 97   03                 sta    <fo2dat   put data                     *  E1FF 96   08       03        lda    <fo4sta  E201 2B   F8                 bmi    02b  E203 85   40                 bita   #ST_INT   INT  E205 27   F8                 beq    03b                     *  E207 96   00                 lda    <fo2cmd   read status                     *  E209 35   F0       99        puls   x,y,u,pc                                          *                     * clcpos, transfer block# into track/sector/side                     *                     * Y = fdcbase                     *               E20B  clcpos    equ    *  E20B 34   70                 pshs   x,y,u  E20D 7F   0402               clr    lside     result side of calc  E210 FC   0002               ldd    flpdpr+flblkm block# M/L                     *  E213 BE   0004               ldx    flpdpr+fltsiz check special addressing  E216 8C   0100               cmpx   #256  E219 27   05                 beq    21f  E21B 8C   0080               cmpx   #128  E21E 26   12                 bne    20f                     *                     *  absolute addressing                     *  E220 B7   0403     21        sta    track  E223 F7   0404               stb    sector  E226 B6   0400               lda    side      from ttyset  E229 84   03                 anda   #%00000011 DS or Biased  E22B 27   35                 beq    88f  E22D 7C   0402               inc    lside     set side 1  E230 20   30                 bra    88f                     *                     * regular block to track/sector                     *  E232 BE   040D     20        ldx    wrkprm    fresh copy of drive params                     *  E235 7F   0403               clr    track     track = 0                     *  E238 A3   03       02        subd   3,x       sec/trk  E23A 2B   05                 bmi    01f                     *  E23C 7C   0403               inc    track     up track #  E23F 20   F7                 bra    02b                     *  E241 E3   03       01        addd   3,x       adjust                     * sector in B, track# on stack  E243 7D   0400               tst    side      is double sided?  E246 27   0F                 beq    05f       no                     *  E248 74   0403               lsr    track     track# / 2  E24B 24   0A                 bcc    05f       even track                     * odd track, add bias  E24D 7C   0402               inc    lside                     * TEST Biased here!  E250 7D   0407               tst    unbias  E253 26   02                 bne    05f       yes  E255 EB   04                 addb   4,x       biased sector#                     *  E257 5C            05        incb             1 relative  E258 F7   0404               stb    sector    set sector#                     *  E25B B6   0403     08        lda    track  E25E A1   02                 cmpa   2,x       test against max  E260 22   03                 bhi    91f  E262 4F            88        clra             set OK  E263 35   F0                 puls   x,y,u,pc                     * errors  E265 86   10       91        lda    #FS_SKER  track > max  E267 35   F0                 puls   x,y,u,pc                                          *                     * fseek, move head to track#, set registers                     * Y = hardware base                     *               E269  fseek     equ    *  E269 34   70                 pshs   x,y,u  E26B B6   0405               lda    latch  E26E 7D   0402               tst    lside  E271 27   04                 beq    lsk1  E273 8A   10                 ora    #LA_SID                     **      oime    LA_SID,latch     1 = side 1  E275 20   02                 bra    lsk2  E277 84   EF       lsk1      anda   #255-LA_SID                     **      aime    !LA_SID,latch 0 = side 0                     *  E279               lsk2                     **      lda     latch  E279 34   02                 pshs   a  E27B 7D   0401               tst    dens  E27E 26   04                 bne    lsk3  E280 8A   20                 ora    #LA_SDN                     **      oime    LA_SDN,latch  E282 20   02                 bra    lsk4  E284 84   DF       lsk3      anda   #255-LA_SDN                     **      aime    !LA_SDN,latch                     *  E286 B7   0405     lsk4      sta    latch                     **      lda     latch  E289 A1   E0                 cmpa   0,s+  E28B 27   08                 beq    lsk5  E28D 84   7F                 anda   #$7f      trigger headsettling delay  E28F 97   04                 sta    <fo4lat  E291 1E   11                 exg    x,x  E293 8A   80                 ora    #$80                     *  E295 97   04       lsk5      sta    <fo4lat                     *  E297 B6   0404               lda    sector  E29A 97   02                 sta    <fo2sec   set sector register                     *  E29C B6   0403               lda    track  E29F 91   01                 cmpa   <fo2trk  E2A1 27   0F                 beq    04f                     *  E2A3 97   03                 sta    <fo2dat  E2A5 86   18                 lda    #FD_SEK  E2A7 BA   E000               ora    steprt    update steprate  E2AA 97   00                 sta    <fo2cmd                     *  E2AC 96   08       01        lda    <fo4sta  E2AE 85   40                 bita   #ST_INT  E2B0 27   FA                 beq    01b                     *  E2B2 96   00       04        lda    <fo2cmd                       E2B4 84   D9                 anda   #!(FS_TRK0|FS_IDX|FS_HLD) remove these from status                     * check if we need to pass write protect  E2B6 F6   0000               ldb    flpdpr+flrflg  E2B9 C5   10                 bitb   #%00010000 command is read  E2BB 27   02                 beq    02f  E2BD 84   BF                 anda   #!FS_WRP                     *  E2BF 35   F0       02        puls   x,y,u,pc                                          *                     * chkrdy, check if drive is ready                     * Y = fdcbase                     *  E2C1 C6   07       chkrdy    ldb    #7        multiply                     *  E2C3 8E   7FFF     10        ldx    #$7fff    long delay                     *  E2C6 B6   0405     11        lda    latch  E2C9 97   04                 sta    <fo4lat  E2CB 96   00                 lda    <fo2cmd  E2CD 2A   0A                 bpl    12f                     *  E2CF 30   1F                 leax   -1,x      decrement counter  E2D1 26   F3                 bne    11b                     *  E2D3 5A                      decb             multiply  E2D4 26   ED                 bne    10b                     *  E2D6 86   80                 lda    #FS_NRDY  E2D8 39                      rts                     *  E2D9 4F            12        clra  E2DA 39                      rts                                          *                     * restore, set drive at track 0                     * Y = fdcbase                     *  E2DB 86   08       restore   lda    #FD_RST  E2DD BA   E000               ora    steprt    adjust  E2E0 97   00                 sta    <fo2cmd  E2E2 96   08       20        lda    <fo4sta  E2E4 0D   04                 tst    <fo4lat   ??  E2E6 85   40                 bita   #ST_INT  E2E8 27   F8                 beq    20b  E2EA 96   00                 lda    <fo2cmd  E2EC 85   64                 bita   #00000100  E2EE 26   03                 bne    21f  E2F0 7F   0403               clr    track     update info  E2F3 39            21        rts                                          *                     * delay, spend some time , no registers affected                     *  E2F4 8D   00       delay     bsr    del1  E2F6 8D   00       del1      bsr    del2  E2F8 34   76       del2      pshs   d,x,y,u  E2FA 35   F6                 puls   d,x,y,u,pc                                          *                     * srchpm, search drive param table, used for track/sector calculations                     * Y = fdcbase                     *  E2FC 34   70       srchpm    pshs   x,y,u  E2FE 8E   E31B               ldx    #fltabl   start table  E301 FC   000B               ldd    flpdpr+fltsid get ttyset/ttyget bytes  E304 84   40                 anda   #%01000000 side bits  E306 C4   C1                 andb   #%11000001 dens bits  E308 10A3 84       31        cmpd   0,x  E30B 27   09                 beq    30f  E30D 30   06                 leax   6,x       size of entry  E30F 6D   02                 tst    2,x  E311 26   F5                 bne    31b  E313 8E   E31B               ldx    #flpdfl                     *  E316 BF   040D     30        stx    wrkprm  E319 35   F0                 puls   x,y,u,pc                                    E31B  fltabl    equ    *  E31B 00 00 4C 00   flpdfl    fcb    $00,$00,76,0,8,0 FD-XS  E321 00 01 4C 00             fcb    $00,$01,76,0,16,0 FD-DX  E327 40 00 4F 00             fcb    $40,$00,79,0,5,0 F5-SX  E32D 40 01 4F 00             fcb    $40,$01,79,0,9,0 F5-XD  E333 40 41 4F 00             fcb    $40,$41,79,0,10,0 F5-XDE  E339 00 81 4F 00             fcb    $00,$81,79,0,18,0 F3-XD  E33F 00 C1 4F 00             fcb    $00,$c1,79,0,20,0 F3-XH  E345 00 00 00 00             fcb    0,0,0,0,0,0                                                                                    * all process registers stacked               E34B  nmihnd    equ    *                                          *                     * signal any interrupt at location in DPR                     *  E34B 86   55       rtiend    lda    #$55  E34D B7   03F8               sta    flpdpr+$03f8 give warning in DPR  E350 3B                      rti                       FFF0                         org    VECTORS                       FFF0 E34B                    fdb    rtiend  FFF2 E34B                    fdb    rtiend  FFF4 E34B                    fdb    rtiend  FFF6 E34B                    fdb    rtiend  FFF8 E34B                    fdb    rtiend  FFFA E34B                    fdb    rtiend  FFFC E34B                    fdb    nmihnd  FFFE E01A                    fdb    reset                                                    end0 Error(s) detected     5 Excessive BRANCH/JUMP(S) detectedSymbol Table:Absolute Symbols:A        0008   ALARMS   000A   B        0009   BARGS    0007   BSPCH    007F   BUFFER   0800   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CMDMSK   0091   CMDRSC   0011   CMDRTK   0091   CMDWSC   0001   CMDWTK   0081   CNCLC    0018   CR       000D   D        0000   DBG      0000   DBGA     0000   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOR4FDC  0000   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   F        000F   FALTS    0007   FDC      0AE9   FDNPR    0064   FD_ERR   0080   FD_FI0   00D0   FD_MRD   0098   FD_MWR   00B8   FD_RST   0008   FD_RTR   00E4   FD_SEK   0018   FD_SRD   0088   FD_SWR   00A8   FD_WTR   00F4   FF       0040   FLP      0001   FS_BUSY  0001   FS_CRC   0008   FS_DRQ   0002   FS_HLD   0020   FS_IDX   0002   FS_LOST  0004   FS_NRDY  0080   FS_RNF   0010   FS_RWOK  00D8   FS_SKER  0010   FS_TRK0  0004   FS_WRP   0040   GPP      0000   GPPDBG   0000   HANGS    0001   HOLDC    001B   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0001   KILLS    0005   LA_8_5   0040   LA_DS0   0009   LA_DS1   000A   LA_DS2   000C   LA_HLT   0080   LA_MOT   0008   LA_SDN   0020   LA_SEL0  0001   LA_SEL1  0002   LA_SEL2  0004   LA_SID   0010   LOOP     0000   MAPSIZ   000D   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   NET      0000   NFDNPR   0050   NL       000A   NODEV    FFFF   NONRAM   00F8   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMBASE  0400   RAMEND   0450   RDYWAIT  9C40   REGSIZ   0008   RESTM    0009   ROMBASE  E000   ROMDBG   0000   S        0004   SBUF     000C   SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   SPI      0000   STABPG   0001   STACKSZ  0040   STKOFS   0F38   ST_DRQ   0080   ST_INT   0040   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TIMES    0009   TRACS    0008   TTYIPR   FFF6   TTYOPR   FFEC   U        0003   UA       0001   UB       0002   UCC      0000   UD       0001   UIO      0000   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VECTORS  FFF0   W        0006   WAITPR   FFD8   WBUFPR   001E   WD2791   0000   WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   chkrdy   E2C1   clcpos   E20B   del1     E2F6   del2     E2F8   delay    E2F4   dens     0401   do_rdsc  E10D   do_rdtk  E155   do_wrsc  E131   do_wrtk  E161   drvsel   E002   fcp2io   03FD   fdbasp   0080   fdcbas   8000   fend     E0E6   fend1    E0F5   fio2cp   03FC   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flerr    E0E3   flnwop   000A   flpack   E0FB   flpcmd   E109   flpdfl   E31B   flpdpr   0000   flpfifo  0020   flpint   03FE   flptel   03FF   flrflg   0000   flstat   0008   fltabl   E31B   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   fo2cmd   8000   fo2dat   8003   fo2sec   8002   fo2trg   800C   fo2trk   8001   fo4lat   8004   fo4sta   8008   frdblk   E1C6   frder    E130   fseek    E269   fwder    E154   fwrblk   E1F3   latch    0405   lside    0402   lsk1     E277   lsk2     E279   lsk3     E284   lsk4     E286   lsk5     E295   lstdrv   0406   nmihnd   E34B   parstab  E006   reset    E01A   restore  E2DB   retry    040F   romstck  0450   rretry   E001   rtiend   E34B   sector   0404   setd0    E071   setd11   E07E   setd2    E091   setd3    E093   side     0400   skretry  E0A5   srchpm   E2FC   step     040C   steprt   E000   track    0403   trkbuf   0800   trktab   0408   unbias   0407   warm     E043   wrkprm   040D   