Adding new devices to your machine and make your kernel work with them is an interresting and educative job.

For a multi-user/multi-tasking operating sytem like UniFLEX you need to consider a couple of things.

1) The device sould show up in the designated IO space. In the CPU09 system this area is at $F000-$F3FF. The MONitor board 
already has split this up in smaller parts. While I have 'assigned' some area's to certain targets, you are free to do otherwise.

2) Interaction between kernel and device should be so efficient as possible. The driver should be able exchange its data fast
with the device. The device should be able to signal the kernel with interrupt(s). 'POLLING' is possible but the price is
loss of overall efficiency and responsiveness. It should be avoided at all cost.

Depending on the data structure you could use a 'block' driver or a 'character' driver. Block drivers handle large chunks
of data per session while Character drivers may handle a byte value as minimum. Block drivers should preferably use DMA(*) to
transfer their data. Examples of block devices: harddisk, floppy disk. Examples of Character devices: terminal, user-io, clock, printer.

The kernel has for both types tables to locate the devices and drivers.

In the CPU09 system all of these tables are to be found in ../mach_m1/mdevtab.t

A character device table entry consists of 5 pointers. Each point to a specific function of the driver.
<ptr_to_open>, <ptr_to_close>, <ptr_to_read>, <ptr_to_write>, <ptr_to_special>

<ptr_to_open> ponts to the open function of the driver. This function initializes some housekeeping, checking for validity
of caller parameters. It should return an error on any faulty input. There could be multiple calls to open.

<ptr_to_close> tells the driver to shutdown. This is done when the last connection is terminated.

<ptr_to_read> is used to transfer data from the device.

<ptr_to_write> is used to transfer data to the device.

<ptr_to_special> points to a function that can read/write 6 special bytes, these can be used to change settings in hardware or
drivers. i.e. ttyset/ttyget for terminals. density/side flags for floppy.

Which pointer-set the kernel picks from the table depends on the 'device major' value. If you look into the /dev directory 
there are all sorts of entries which start with 'c'. Those are character type devices. 

++ ls -l /dev
total 63
drwxr-x 2 root        976 May 10 01:14 .
drwxrwx27 root        704 May 01 14:58 ..
brw-r-- 1 root      1,  0 May 01 13:52 fd0
crw-r-- 1 root      6,  0 Apr 29 23:27 fdc0
crw-r-- 1 root      4,  0 Nov 29 15:54 hwgetset
crw-rwx 1 root      2,  0 Dec 31  1979 null
crw---- 1 root      1,  1 Dec 31  1979 pmem
cr--r-- 1 root      2,  2 Sep 24  2019 random
brw-r-- 1 root      0,  0 May 01 13:50 root
crw---- 1 root      1,  0 Dec 31  1979 smem
brw-r-- 1 root      0,  0 May 01 13:50 swap
crw--w- 1 root      0,  0 May 11 20:21 tty00
crw-r-- 1 root      0,  1 May 01 18:07 tty01
crw-r-- 1 root      0,  2 May 01 18:07 tty02
crw-r-- 1 root      0,  3 May 01 18:07 tty03
crw-r-- 1 root      0,  4 May 01 18:07 tty04
crw-r-- 1 root      5,  9 May 10 02:58 tty09
crw-r-- 1 root      5, 10 May 01 13:48 tty10
crw-r-- 1 root      5, 11 May 01 13:48 tty11
crw-r-- 1 root      5, 12 May 10 02:58 tty12
crw-r-- 1 root      5, 15 Mar 25 02:12 tty15
crw-r-- 1 root      5, 16 Mar 25 02:07 tty16
brw---- 1 root      0,  0 May 01 06:31 w00
brw---- 1 root      0,  1 Sep 24  2019 w01
brw---- 1 root      0,  2 Sep 24  2019 w02
brw---- 1 root      0,  3 Apr 15 06:32 w03
brw---- 1 root      0,  4 May 10 04:05 w10
brw---- 1 root      0,  5 Apr 16 16:08 w11
brw---- 1 root      0,  6 Dec 30 12:10 w12
brw---- 1 root      0,  7 Sep 24  2019 w13
crw---- 1 root      3,  0 Sep 24  2019 wc00
crw---- 1 root      3,  1 Sep 24  2019 wc01
crw---- 1 root      3,  2 Sep 24  2019 wc02
crw---- 1 root      3,  3 Sep 24  2019 wc03
crw---- 1 root      3,  4 Sep 24  2019 wc10
crw---- 1 root      3,  5 Sep 24  2019 wc11
crw---- 1 root      3,  6 Sep 24  2019 wc12
crw---- 1 root      3,  7 Sep 24  2019 wc13
cr--r-- 1 root      2,  1 Sep 24  2019 zero
++ 

Those line which start with 'c' are character devices and the ones with 'b' are block drivers. Instead of the file size
device entries show 2 numbers separated by a comma. These are the 'major'(left) and 'minor'(right) numbers.
The kernel use the major as index into the character device table. The minor is used within the driver to identify a specific
device, i.e. tty00...tty08, wc0...wc7. A driver _should_ check to minor values for correctness and return an error if faulty.

The next thing is assign an interrupt to a driver. This method may vary. For the tty's the kernel consult a table with bitmask,
device address and service routine address. If such is not possible then individual tests may be done. Interrupt handling is
done in "minthan.t". Lastly, some hardware needs to be initialized before the kernel starts. This is a "mach.t" task. Add calls
to initializing routines in your driver from here.


to be cont'd


* The HD63X09 has block transfer instructions that qua efficiency comes close to of that of DMA.
