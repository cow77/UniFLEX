After some long thoughts I choose to take a different approach. Instead of making distinct CPU09FLP/CPU09NWP/CPU09SPI boardsI ended up with one generic CPU09GPP design and a couple of pop-up boards.I long wanted to have a floppy interface as well. But there is no 68C44 nor a 63C44 at the planet. So I had to have a separate2 MHz system with it's own IDE drive for a floppy compatible system. A HD63C09 @ 4 MHz busclock can do the datarate for an 8" floppy at double-dennsity with 'the fingers in the nose'. So a dedicated CPU for this would solve a lot of problems.Most of the driver code would sit in a ROM for the dedicated CPU. The driver for the OS would be compact and allow for the firstUniFLEX ever to have 2 separate block device drivers. All systems from the past shared one block device driver over HD/FD and tape.Another possibility now is "Read Track". This reads a whole floppy track in a buffer and returns that data to the caller. The buffer data contains _all_ the bytes from one track including address marks, gap bytes, data marks, data and crc.In the past you could do a "write Track" but never a "read Track".One can create relatively simple pop-up boards for this generic IO processor for functions like Network over SPI, SD card over SPI and of course a floppy interface. Cost will be low as well. Yes you can have more than one CPU09GPP with a specific pop-up boardin a system (I will). But a single GPP with multiple pup-up boards is another way. And yes, you must swap the PROM as well.The memory map has the dual-port ram from 0000-03FF, the system ram from 0400 to 7FFF, the IO map from 8000-83FF and PROM from8400-FFFF. Plenty of space for code and data.On the OS side one GPP can be mapped to X000-X3FF/X400-X7FF/X800-XBFF/XC00-XFFF in pages F8/F9/FA/FB or FE. We can share thecurrent FIFO driver code (TSC) with some changes for this purpose. I spotted already a few bugs there :-).And when one creates his own pop-up board for his decicated purpose, nothing will hold him/her back.The IO connector on the GPP board passes D0-D7/A0-A9/E/RW/Q/RES/HLT/BS/BA/SELt/SEL2/5V/GND to the pop-up board and there areyet a few pins to spare.This means that I (for the time being) will not continue any longer on the CPU09SPI board.One final remark for those who want to run FLEX on the CPU09 hardware _and_ with floppy interface. Create a very simple (read cheap) CPU09GPP replacement without CPU but with own PROM address decoding and databus buffer. The floppy driver would sit in FLEX OS space but in a PROM @ i.e. E800-EFFF.In the works are a 09FLP (floppy controller) pop-up and a 09SPI (for SD card or W5500 network module) pop-up.A pop-up board is 100 x 100 mm in size.2020-03-08:  the CPU09GPP and the 09FLP boards are populated. I am starting tests and writing software now.2020-03-22:  I created a special kernel with the debug-acia driver present and the IOP. Additional I created a monitor ROMfor the CPU09GPP. With a special ACIA in kernel IO space I can communicate with the GPP monitor ROM. I entered simple code, for reading a sector from diskette, in RAM and yes, it works. I can read data from floppies whoare written in 1993!. I have a 33 diskette large backup of a whole UniFLEX system from that time, so I expect a few surprisesto be on those disks. Now it is time for some serious driver coding :-). I need to study the(my) driver from the past becauseat that time it was so clever that it could work with: 3/5/8 inch, each FM and MFM. Also double-step, that is a 40 track diskette in a 80 track drive and biased and un-biased sectors on tracks. The latter more important for MSDOS diskswhich UniFLEX could handle with uos2pc and pc2uos etc.Bottom line is we are on track (!)2020-04-29: I am opening a time capsule by restoring 34 floppies of a backup I made in 1992 (or so). This means that a few things start to work well. First, I created a second block device driver for the CPU09GPP/09FLP combo. This is the first UniFLEX kernel ever to have two separate block devices! Second, the driver on the 09FLP side start to work too. At this moment it supports restore,seek and read but that is enough for the moment. By restoring the backup a lot of programs in /bin and /usr/bin are overwritten. But as it turns out these new (old) versions work better than the ones I used up to now.2020-07-10:In the mean time I indeed got the second block device driver working. It is a milestone in UniFLEX world as the kernelnow handles 2 completely independent block device drivers.The floppy driver code that runs on the GPP CPU, is still somewhat experimental, but tests have shown that without DMAthe hardware can handle High Denisty floppy disks (500 kbit) with ease. The GPP code should be completed and matured. When finished it will support 512 bytes sectors initially but later I planto add 128 Byte sectors and 256 Bytes sectors as well. In the past (80's-90's) my kernel/floppy driver could also handleFLEX Double sided Double density disks, something the original TSC version could not. That driver could figure out whichdata rate the floppy had, single or double sided, single or double denisty, 5 inch mode or 8 inch mode and lastly didsupport 40 tarck disks in a 80 tarck drive. Another thing the GPP/FLP combo will be capable off is 'read track'. 'Write track' was used to put the basic format onto the diskettes and could be done because of the sys cbreak call that would issue the process memory contineously so that the DMA could transfer a whole trackfrom process memory to the disk. Read track was not allowed because there was no guarantee that the memory was properlysorted in advance. For Write track this was not a big issue, if the memory was not sorted, the diskette would not bereadable as result, but no further harm to the system was done.2020-09-21:The kernel driver flpdrvr.t is in a good shape. It supports sector read, sector write and track write.The gppflpdrv.t is getting mature, I _can_ format a number of disk formats but not yet all :-(Nice is that our formatting programs from the 80/090's work without any change. The problem is definitively in the gppflpdvr.t code or in the hardware. But I made a lot of progress here.I can format F8-DD80, F8-SD80, F8-DS80, F8-SS80, FD-SS, FD-SD, FD-DS, FD-DD. But for some reason the 5' formatsyet fail. I am sure I will find that too :-)********************************************************************************************* The CPU09GPP/09FLP combo now works fully********************************************************************************************2020-09-29:I finally have the driver working. It handles all sorts of UniFLEX formats automatically. See list in spreadsheet.At this moment the 'double step' formats are not supported and they may be never again.'kformat' is a version of 'formatfd' which supports all these formats.Even 'pc2uos0' shows you the directory of an MSDOS diskette and can be used to transfer data from and to the diskette.The 09FLP board has minor tweeks to get it working. I will finalize the design soon.