2019-06-03.

Status of project is as follows:

CPU09MM3
First design version of CPU board works but lacks HD6309/6809 detection. E clock at 4 MHz. All signals are as expected.
Second design version is finished and ready, I will order them in the coming days. 
The card provides the normal bus signals, DATA and ADDRESS and CONTROL and additionally /VMA, /XFEXX
The memory mapper can store 64 maps of 16 memory pages each.

CPU09MON
First design version of MONitor board showed some weaknesses in the design. Made a second design version which is in the mail.
I dropped the parallel port and used it for the 'LIGHTS' function, 8 LEDS that are toggled in various parts of the kernel code.
I placed the master baudrate clock on this board, it can be transferred over the backplane to i.e. CPU09SR4.
It has two RAM chips 512Kx8, one ROM 8Kx8, an ACIA, a PIA for timer control and 'LIGHTS', Xtal clock for baudrate(s), hardware
for BLACKHOLE and WHITEHOLE. In user mode any access to this memory region results in a trap and end of user process.
The ROM can be hardware or software selected as 4 images of 2Kbyte each. So one image could be a MIKBUG compatible monitor
where another could be UniBUG and a third SBUG.

CPU09IDE
First design proved to be working but now I understand more about the IDE interface and with some IDE disks I found that
I had to improve some things, The second design version is in the mail too.
PIO works, DMA works. Some IDE disks do a DMA in one single cycle, but others break it up in 2 or 3 parts: first is 510 bytes,
second is one byte and the last is one byte too. The DMA state machine can handle all. 

CPU09SR4
First design version of the 4 port serial card is ready. It has place  for 4 ACIA devices. Each ACIA have a software controllable
baudrate selection: 38k4, 19k2, 9k6, 4k8, 2k4, 1k2, 0k6 and 0k3. When it is time for it I will order the proto version.

CPU09IOP
First design version of the serial character devices IOP (IOprocessor) is ready. When it is time for it I will order the proto version.
When finished the IOP should be able to control a couple of CPU09SR4 boards.

CPU09SPI
First design version of the SPI board is ready. It can be used with the W5500 network component or with a SD card reader.
The SPI interface is to work with DMA to a local processor (HD63C09) and the data can be transferred to the OS via a 1Kx8 
dual-port RAM. When it is time for it I will order the proto version.

CPU09BP
The design for the backplane is ready. As I have a compatible backplane from the 80's I can wait for the first proto version.
During the last months a few times the design had improved and reworked. It has place for a ATX style power connector
and 7 slots for boards. It could fit in an 19" rack. I expect soon to order the prototypes.

On the software side I am thinking about how to bring up a simple system. With a minimal filesystem and programs.
On Linux I can create a fresh UniFLEX filesystem as a file. I used Evenson's SWTPC emulator to check my results and that helped me.
Sad thing is that the Evenson's Emulator sometimes just dies.....

Edit: Around April 2019 I got in touch with Mike. I spent a few days in figuring out why it died and found that the memory
allocation table contained erroneous pages. After changing the switch settings on the CPU board _and_ modifying the UniBUG
ROM image, the problem went away. Now it runs as it should and don't crash any longer!

As I can mount this or any UniFLEX filesystem with FUSE on Linux, the building process can be automated with scripts. The biggest hurdle
is to get it on the IDE disk easily. But I have a few ways to try. (The USB<->IDE dongle is the easiest way)

I have a LOT of fun with my GAL programming hardware and software. I rewrote the GALBLAST.C code in PERL and designed hardware that
can switch the supply voltages and the programming voltages. It works with a normal PC parallel port and also with _SOME_ USB<->IEE1284
dongles. I made a separate GitHub archive for it. 
In the near future I will post both hardware and software on GitHub.

2019-07-22:

I believe the CPU09MMU board reached it's final revision. The current version, with minor corrections works as expected.
The second version of the CPU09MON board also works as designed, only have to wait the HD63B21 devices to complete all tests.
The CPU09IDE current version works, with too much wires, as desired. It does DMA very well, can cope with special behaveour of some
IDE disks. Now it is time to complete the unibug rom version for this hardware and try to bring up a (very small) filesystem.

2019-07-26:

I am able to (try) to boot from an empty filesystem. After it returns back to UniBUG. I make an provision in the bootsector 
on the disk, so that the user can enter a figure from 0 up to 9 after the D command within 2 seconds. 
It allowes for to boot different kernels, to experiment. If nothing is entered, then after 2 seconds the standard 'uniflex' is 
booted.

2019-08-23:

The CPU09MMU board is needing an extra chip. I ran into somthing that I could not solve by changing the GAL logic. It came to light when I started 
to run UniFLEX on an IDE disk and starting to build my custom UniFLEX kernel with it. After adding the new chip everything works like a charm.
The CPU board, the MONitor board and the IDE controller. Yes I can build my own UniFLEX from the original TSC sources.
Along the way I changed a few things though. I took out the 'install' function, it is not longer relevant. The Rom boot code alolows 
for to choose IDE disk 0 or IDE disk 1. The disk boot code displays:  image: uniflex, after which you have about 2 seconds to type
an CR or a figure from 0 up to 9. This figure is appended to the boot name and will be tried to boot. This way it is very easy
to test various kernel code versions fast. I bought a USB<->IDE dongle and under Linux I can easy dump an image.dsk onto the IDE
drive and test it directly under UniFLEX after. The LED's on the MONitor board are nicely updated from the kernel from the
LIGHTS location.

The other two boards have been as from 2019-07-22. No changes yet.

2019-09-07:

The USB<->IDE dongle (Euro 4.00) is priceless, it is a snap to put an UniFLEX filesystem onto the IDE disk and sometimes dump
the IDE UniFLEX filesystem back into a Linux file and access it with Fuse. I have been running stress tests and found a few
issues, but most of the times I could fix that by changing the GAL logic on the CPU board or making small changes to drivers.
So I believe there will be no showstoppers left in the design's for the moment.
Next step is ordering the latest revisions of the boards, including the backplane now. But this all is a matter of time 
(I have a job too) and money (while cheap it is not for free :-) ). So I have to have little patience. 
On the IDE board there are 2 74LS461 IC's and while I could find and buy them on the Internet easily that may not be true 
for everyone. If that proves to be troublesome, I will design a simple small drop-in board for those two components. 
It will be with SMT components though.

Next board that I will build and test will be the CPU09SR4 with four serial ports. Each port has it's own baudrate setting from
software. 38400/19200/9600/4800/2400/1200/600/300 baud. I need to adapt the serial drivers in the kernel for this too.

The plan is that this board can also be used with the CPU09IOP, the serial IO Processor. It has it's own 6309 CPU and relieves
the main CPU from all the IO interrupts.

2019-10-15:

The final vesion of the CPU/MON/IDE boards populated and tested. Some did immediately, but some after some debugging, all is 
OK now.
The first version of the back-plane boards and the CPU09SR4 are in the mail.

20190-10-25:

I must have smoked something bad when I was doing the CPU09SR4 board. While the resulting board was "useable", a lot
had gone wrong. Missing connections on the MAX233 devices, wrong baudrate division, inverse board selection. 
So I redid the board and I ordered samples again. I believe this one will do well.

Also the CPU09IOP came in the mail, that one proved to be much better than the above board. I populated the board, 
programmed the GAL and made a short ribbon cable (40 pole, about 20 cm).An old IDE cable will do well. I put the IOP
in the backplane, made the bus selection wire and yes the UniFLEX side was working like a charm. On de IOP side I created
a monitor ROM, took a second backplane, hooked the cable extension into it as a CPU09SR4 board. Yes, I can talk both sides
now. The interrupt signals in the dualported RAM work too. So that is a big progress.

2019-11-22:

The CPU09SR4 board in it's revision 0.8 is fine. :-) Everything works as it should. While testing it, I was surprised how well
UniFLEX, probably due to the efficient context switching on the CPU09MM3 board, can handle 3 serial outputs on high baudrate.
When my last MAX233 chips arrive I will attempt to fully load all 5 ACIA's and see how that goes.

In the mean time I have been playing with the first version of the CPU09SPI board. For a first shot it proved to be not bad
at all. Of course I had expected some things not right yet. Missing is a variable SPI clock rate generator. But the serialiser/
de-serialyser hardware does it job well and after some wiring on the board it did synchronize well with a-synchronous clocks.

I ran into an issue with ^C in 'basic'. I see that after giving control C it core dumps. I suspect the SIGNAL handling in the
kernel in relation to a larger stack with the 6309. Careful inspection of the kernel source revealed 2 incorrectly modified
lines. After correction, building and running the kernel it showed the problem is solved.

2019-12-13:
Current status: CPU09MM3,CPU09MON,CPU09IDE, CPU09BP and CPU09SR4 are all working well and have no known issues.
I know at least two other people who build the boards and have their systems running.

The Floppy/DMA card and the SPI card in their original form are off the table, I decided to take a different route, 
use a CPU09GPP as the base for those.

I have started with the CPU09GPP. This is a general purpose (io) processor. It talks to the main CPU (OS) via a dualport RAM
of 1Kx8. It also has an expansion connector with the local data bus, the lower local address bits, local control and local
interrupt signals. It supports up to 32K RAM and 32K PROM. Via this expansion connection I have planned for a floppy controller 
pop-up board and a SPI controller pop-up board. Some of us want still use floppies (me too) but there is no 4 MHz 6844 or 6344 
on the planet. As the GPP CPU at 4Mhz busclock can handle the floppy data rate easily this is a nice approach.

The proto version of the CPU09GPP and the 09FLP are in the mail. It is a nice X-mas project. :-)
I am waiting the tantalium caps still..  :-(




